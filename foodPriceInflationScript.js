priceDatabase = [
    ["Beef stewing cuts (per kilogram)","Beef stewing cuts","per kilogram","Meat / protein",12.66,13.12,13.51,13.29,14.08,14.1,14.44,14.35,13.62,13.41,13.35,13.9,12.97,12.61,13.51,13.69,13.84,13.9,13.4,13.71,13.38,12.65,12.04,13.71,13.71,13.32,13.4,13.53,14.43,14.76,14.39,14.23,14.05,13.08,14.48,14.73,13.91,14.2,15.22,14.51,17.36,18.84,17.71,15.7,14.74,14.61,15.19,14.4,15.07,14.98,14.67,15.12,15.54,16.22,16.42,16.47,15.77,16.65,17.28,17.11,17.08,16.44,17.32,18.65,18.8,18.69,18.73,18.51,16.7,18.39,19.18,19.02,17.52,17.05,17.08  ],
    ["Beef striploin cuts (per kilogram)","Beef striploin cuts","per kilogram","Meat / protein",21.94,22.51,23.23,19.59,23.04,23.34,23.83,20.63,23.23,17,18.14,18.07,16.62,20,23.06,18.22,19.07,20.39,21,19.47,21.9,19.94,18.85,14.08,19.79,19.08,21.56,17.32,19.94,20.72,20.32,19.11,18.13,18.41,17.42,18.29,20.08,18.96,20.92,19.16,23.63,31.62,24.03,24.58,20.73,23.22,20.27,18.43,22.38,21.52,24.69,22.87,23.38,25.53,26.89,27.82,23.12,26.7,24.05,21.53,26.55,26.97,32.72,28.8,24.32,24.19,23.27,22.91,26.25,23.51,21.21,19.53,27.98,23.32,27.7  ],
    ["Beef top sirloin cuts (per kilogram)","Beef top sirloin cuts","per kilogram","Meat / protein",13.44,12.8,13.96,12.4,16.91,15.7,15.69,15.8,15.09,16.05,13.53,10.4,14.25,15.28,14.17,14.6,14.97,14.57,17.23,13.67,13.74,14.41,13.9,12.53,14.35,14.59,17.66,16.36,17.2,16,14.01,13.23,14.71,14.87,14.72,12.86,15.29,14.9,16.57,14.99,19.59,20.68,16.97,15.46,14.28,12.94,15.9,13.43,15.52,14.72,16.2,16.46,15.05,17.44,17.09,17.63,18.25,15.71,19.69,15.62,19.07,19.59,18.02,19.11,18.71,18.88,18.61,18.75,22.66,16.05,17.55,15.82,18.44,18.76,21.5  ],
    ["Beef rib cuts (per kilogram)","Beef rib cuts","per kilogram","Meat / protein",20.17,20.13,22.95,17.47,18.8,21.36,21.17,21.3,20.4,15.1,22.51,14.96,20.95,22.52,16.24,18.81,20.86,18.59,21.5,19.87,20.25,16.71,23.19,18.79,21.68,23.15,22.34,18.93,24.17,21.08,20.79,23.6,20.91,16.42,22.78,15.67,23.02,25.51,22.23,19.89,22.94,25.44,23.75,25.48,19.63,17.6,25.44,19.12,25.45,22.95,21.1,23.69,27.07,24.05,26,26.11,29.04,22.08,31.32,23.54,30.21,31.97,28.2,24.03,25.82,24.77,25.99,27.42,26.48,21.23,30.07,21.18,28.18,30.71,28.92  ],
    ["Ground beef (per kilogram)","Ground beef","per kilogram","Meat / protein",9.12,9.48,9.34,9.79,9.47,9.18,10.03,9.79,9.61,9.13,9.36,9.06,9.11,9.41,9.12,9.09,9.51,8.95,9.48,9.07,9.12,9.46,8.89,8.44,8.8,9.04,8.72,9.15,8.99,9.31,9.04,9.59,9.06,9.28,9.69,9.98,9.56,9.48,10.1,10.54,11.79,11.18,10.19,9.22,9.18,9.25,9.37,10.07,9.45,9.27,9.5,9.19,9.37,9.1,9.41,9.88,10.1,10.07,10.81,10.32,10.69,10.29,10.11,10.82,10.32,10.28,10.64,10.47,11.54,10.22,10.24,10.92,10.64,9.92,10.31  ],
    ["Pork loin cuts (per kilogram)","Pork loin cuts","per kilogram","Meat / protein",7.34,7.16,7.26,7.88,8.79,7.57,8.11,8.14,7.15,7.84,7.96,8.11,7.05,6.83,8.01,8.21,7.76,7.39,7.77,7.55,8.09,7.56,7.5,8.47,7.75,8.45,7.5,8.18,8.24,9.03,7.98,8.98,8.06,8,7.56,8.41,7.95,8.74,8.45,8.55,9.24,9.22,8.22,8.72,8.45,7.81,8.09,8.62,8.97,8.38,7.5,8.43,8.86,8.7,9.2,8.98,9.3,8.69,9.09,9.49,9.28,8.22,8.35,9.12,9.05,9.19,8.91,8.55,8.45,8.99,8.14,9.28,9.65,7.9,7.92  ],
    ["Pork rib cuts (per kilogram)","Pork rib cuts","per kilogram","Meat / protein",7.37,7.28,7.31,7.77,8.3,7.8,8.12,7.98,8.66,6.87,7.35,9.63,7.71,8.69,7.62,7.91,8.07,7.89,7.53,7.96,6.98,7.55,8.62,9.22,7.16,8.06,8.38,8.48,8.98,8.81,8.76,8.6,7.95,7.95,8.53,8.41,8.89,7.87,8.87,9.79,9.25,10.58,10.2,9.35,9.73,10.52,9.48,10.29,9.13,8.46,9.32,10.03,10.24,11.73,12.2,13.32,10.57,11.69,11.3,10.87,10.73,10.82,10.38,11.44,11.48,11.39,11.45,10.79,10.39,10.33,8.85,10.05,8.67,9.01,8.97  ],
    ["Pork shoulder cuts (per kilogram)","Pork shoulder cuts","per kilogram","Meat / protein",4.76,5.41,5.7,6.21,6.9,7.16,7.67,6.72,6.17,4.85,4.06,4.22,4.5,4.52,6.68,5.31,3.64,6.85,5.73,6.2,6.58,4.8,4.84,7.23,4.93,3.87,5.95,7.29,5.5,6.29,8.48,8.27,6.67,5.09,6.64,7.13,5.31,4.05,6.94,7.26,5.32,5.42,5.12,4.83,5.11,5.1,5.15,5.4,4.74,4.39,5.87,5.72,6.05,6.22,5.58,5.2,7.15,7.52,6.96,6.6,5.46,5.25,6.74,7.51,7.18,6.9,6.18,6.56,7.32,5.05,7.15,6.16,4.48,6.18,5.79  ],
    ["Whole chicken (per kilogram)","Whole chicken","per kilogram","Meat / protein",5.15,4.99,5.45,5.59,5.14,5.58,5.94,6.21,5.76,5.81,5.11,5.13,5.6,5.19,5.62,5.48,5.13,5.19,5.22,5.44,5.86,5.48,5.17,5.93,5.75,5.19,5.23,5.5,5.27,5.24,5.43,5.23,5.08,5.74,4.96,5.77,5.5,5.37,5.65,5.32,5.44,5.35,5.75,6.08,5.18,5.73,5.17,6.54,5.19,5.55,5.18,6.2,5.63,5.13,6.43,6.18,5.65,6.17,5.91,6.61,5.87,5.65,5.55,5.66,5.75,5.93,5.85,6.08,6.55,5.94,6.37,6.58,5.86,6.39,6.21  ],
    ["Chicken breasts (per kilogram)","Chicken breasts","per kilogram","Meat / protein",11.38,11.22,11.19,11.37,11.57,11.31,12.14,11.94,12.75,12.2,12.68,12.23,12.25,11.77,11.24,11.68,11.63,11.72,11.95,11.6,12.57,11.71,12.73,11.19,11.97,11.24,11.46,11.47,11.26,11.8,12.41,11.73,12.22,11.81,12.21,12.13,11.91,12.68,13.44,12.91,11.04,11.94,12.11,11.94,12.03,12.95,13.02,12.05,12,12.3,11.93,12.58,12.55,12.77,12.58,13.9,13.13,12.72,14.01,13.56,13.78,13.67,13.93,15.32,15.04,14.84,15.94,15.12,14.95,13.92,13.77,13.89,13.99,14.04,14.72  ],
    ["Chicken thigh (per kilogram)","Chicken thigh","per kilogram","Meat / protein",8.93,9.15,8.59,9.5,9.46,8.73,8.65,9.15,9.47,8.77,9.02,8.6,8.27,8.58,8.54,8.67,8.46,8.53,8.45,9.55,9.45,9.57,10.11,10.05,9.02,9.6,9.3,9.64,9.31,9.11,8.95,8.76,9.79,8.62,10.17,8.55,9.86,10.05,8.69,10.04,9.14,9.19,10.04,9.27,9.6,8.93,10.18,9.45,9.51,10.22,8.65,9.95,8.9,9.9,9.66,9.97,9.84,11.11,9.83,10.99,10.61,10.66,10.4,11.72,10.92,10.34,11.39,11.63,12,11.58,12.01,11.96,12.1,11.48,11.96  ],
    ["Chicken drumsticks (per kilogram)","Chicken drumsticks","per kilogram","Meat / protein",5.99,5.95,5.62,6.26,6.6,5.2,5.62,5.69,6.25,5.75,5.73,5.98,5.49,5.73,5.81,5.68,5.63,5.59,5.63,6.08,6.3,6.45,6.8,6.57,6.08,6.29,6.18,6.12,6.19,5.75,5.81,5.68,6.22,5.65,6.29,5.71,5.93,6.44,5.78,6.71,6.36,6.05,6.62,6.04,5.91,5.65,5.97,6.17,5.99,6.54,5.63,6.39,5.83,6.04,6,6.18,6.15,7.02,6.04,6.88,6.68,6.45,5.79,7.11,6.14,5.94,6.58,7.19,6.51,6.87,6.31,6.48,6.76,6.48,5.84  ],
    ["Bacon (500 grams)","Bacon","500 grams","Meat / protein",5.03,5.37,5.74,5.57,5.5,5.39,5.61,6.23,5.77,5.62,5.39,5.29,5.79,5.48,5.65,5.67,5.52,5.3,5.64,6.18,6.12,5.77,5.88,5.81,6.28,5.78,5.55,5.7,5.58,5.86,5.82,5.84,6.04,5.4,5.88,5.94,5.79,5.37,5.77,5.97,5.67,5.91,6.09,5.92,5.73,5.65,6.2,6.27,6.01,5.77,6.25,6.21,6.58,6.43,6.79,7.08,7.05,6.84,7.04,7.34,6.9,7,6.98,7.25,7.3,7.01,7.24,7.34,7.33,7.17,7,7.5,7.04,6.75,6.79  ],
    ["Wieners (400 grams)","Wieners","400 grams","Meat / protein",3.12,3.23,2.84,3.04,2.96,2.91,3.07,2.9,3.13,3.11,3.06,3.17,2.93,2.94,3.1,3.04,3.21,3.1,3.15,3,3.05,3.04,3,3.13,3.06,2.97,3.22,3.32,3.11,3.24,3.26,3.28,3.24,3.31,3.24,3.33,3.35,3.16,3.52,3.65,3.59,3.66,3.54,3.46,3.45,3.56,3.58,3.77,3.44,3.77,3.78,3.76,3.51,3.62,3.7,3.9,3.69,3.89,3.87,3.99,3.79,3.91,3.85,4.09,3.91,4.05,4.05,4.03,3.9,4.16,4.09,4.14,3.79,4.08,4.01  ],
    ["Salmon (per kilogram)","Salmon","per kilogram","Meat / protein",24.83,24.66,24.3,23.11,24.02,23.85,22.55,20.35,22.67,19.82,21.07,20.19,21.64,21.48,22.19,23.16,23.82,23.8,23.85,22.78,23.3,23.44,24.86,22.63,25.76,24.53,25.67,23.01,25.47,24.4,23.43,22.81,24.25,22.2,25.07,22.83,24.1,23.53,24.68,23.87,24.96,23.22,22.87,21.15,20.99,20.89,20.71,20.35,22.04,22.98,21.98,23.04,22.37,24.27,24.49,24.61,24.51,23.88,24.34,23.46,26.58,25.86,26.51,26.41,29.16,28.15,26.75,26.61,26.43,23.27,25.59,25.12,28.93,28.32,29.1  ],
    ["Shrimp (300 grams)","Shrimp","300 grams","Meat / protein",6.59,6.79,7.07,6.51,7.04,7.23,7.22,7.38,7.18,6.93,7.14,7.29,6.9,7.09,6.97,7,7.44,7.49,7.65,7.56,7.46,7.08,7.29,7.19,7.04,7.02,6.93,6.83,7.12,7.18,7.11,7.15,6.98,6.98,6.93,7.02,7.14,6.75,6.94,7.14,7.22,7.13,6.99,7.15,6.95,6.99,7.02,7.5,6.98,7.39,6.93,7.17,7.15,7.34,7.43,7.25,7.38,7.59,7.35,7.63,7.47,7.59,7.43,7.8,7.99,7.84,7.92,7.83,7.8,7.31,7.36,8.16,7.91,7.73,7.54  ],
    ["Canned salmon (213 grams)","Canned salmon","213 grams","Canned foods",3.03,2.66,2.88,3.22,3.32,2.72,3.18,3.16,3.25,3.37,3.14,3.25,3.26,2.88,3.19,3.15,3.22,3.35,3.12,3.07,3.08,3.24,3.51,3.77,3.77,4.35,4.51,4.2,4.54,4.47,4.41,4.3,4.48,4.79,4.61,4.28,4.43,4.31,4.51,4.68,4.48,4.58,4.81,4.47,4.56,4.84,4.62,4.64,4.73,4.64,4.71,4.54,4.6,4.84,4.77,4.64,4.42,4.8,4.62,4.68,4.65,4.68,4.63,4.88,4.5,4.59,4.76,4.69,4.84,4.62,4.75,4.9,4.79,4.42,4.85  ],
    ["Canned tuna (170 grams)","Canned tuna","170 grams","Canned foods",1.44,1.48,1.51,1.52,1.53,1.6,1.57,1.58,1.6,1.58,1.62,1.81,1.63,1.76,1.66,1.59,1.7,1.73,1.65,1.66,1.73,1.61,1.75,1.81,1.7,1.65,1.7,1.54,1.62,1.81,1.61,1.68,1.69,1.64,1.58,1.69,1.62,1.62,1.86,1.96,1.84,1.77,1.74,1.53,1.72,1.73,1.65,1.88,1.6,1.67,1.69,1.63,1.73,1.74,1.65,1.61,1.65,1.68,1.6,1.86,1.69,1.72,1.7,1.85,1.8,1.84,1.7,1.73,1.77,1.61,1.64,1.81,1.75,1.85,1.86  ],
    ["Meatless burgers (226 grams)","Meatless burgers","226 grams","Meat / protein",4.19,4.16,4.01,4.11,4.12,4.21,4.21,4.16,4.2,4.22,4.25,4.3,4.25,4.23,4.23,4.21,4.24,4.35,4.29,4.23,4.39,4.52,4.59,4.52,4.45,4.34,4.44,4.79,6.41,5.91,6.06,5.95,5.83,5.56,5.51,5.52,4.87,4.68,5.46,5.65,5.5,5.68,5.59,5.59,5.68,5.7,5.75,5.66,5.6,5.52,5.6,5.79,5.72,5.77,5.74,5.79,5.91,5.81,5.84,5.92,5.7,5.83,5.68,5.92,5.61,5.58,5.82,5.9,5.87,5.92,5.73,6.23,5.79,6,5.97  ],
    ["Milk (1 litre)","Milk","1 litre","Dairy",2.17,2.34,2.23,2.33,2.34,2.34,2.35,2.35,2.35,2.35,2.34,2.36,2.35,2.36,2.35,2.35,2.36,2.37,2.39,2.4,2.43,2.43,2.47,2.48,2.47,2.47,2.45,2.46,2.45,2.49,2.49,2.5,2.51,2.49,2.49,2.49,2.51,2.54,2.56,2.57,2.56,2.56,2.57,2.56,2.56,2.56,2.56,2.58,2.57,2.63,2.63,2.64,2.63,2.64,2.66,2.66,2.66,2.65,2.63,2.64,2.63,2.77,2.77,2.78,2.79,2.79,2.8,2.82,2.9,2.89,2.91,2.91,2.89,2.95,2.96  ],
    ["Milk (2 litres)","Milk","2 litres","Dairy",4.04,4.03,4.05,4.05,4.04,4.04,4.02,4.03,4.02,4.03,4.01,4.03,4.04,4.05,4.05,4.05,4.05,4.05,4.05,4.11,4.17,4.18,4.17,4.18,4.2,4.17,4.15,4.15,4.15,4.19,4.2,4.2,4.18,4.18,4.19,4.2,4.21,4.27,4.34,4.35,4.4,4.35,4.35,4.35,4.36,4.36,4.34,4.35,4.36,4.48,4.47,4.46,4.5,4.48,4.52,4.5,4.49,4.48,4.46,4.48,4.49,4.72,4.74,4.76,4.75,4.74,4.73,4.76,4.9,4.89,4.93,4.94,4.92,5.03,5.08  ],
    ["Milk (4 litres)","Milk","4 litres","Dairy",5.13,5.15,5.15,5.12,5.12,5.11,5.11,5.11,5.12,5.13,5.14,5.14,5.13,5.15,5.14,5.14,5.15,5.11,5.11,5.13,5.32,5.31,5.29,5.31,5.29,5.29,5.25,5.24,5.24,5.2,5.18,5.21,5.21,5.21,5.22,5.24,5.26,5.34,5.39,5.42,5.36,5.36,5.33,5.31,5.33,5.34,5.33,5.34,5.36,5.52,5.51,5.5,5.52,5.51,5.5,5.49,5.5,5.5,5.51,5.54,5.54,5.98,6.02,6.04,6.03,6,5.99,6.01,6.24,6.23,6.27,6.3,6.29,6.42,6.45  ],
    ["Soy milk (1.89 litres)","Soy milk","1.89 litres","Dairy",3.71,3.77,3.91,3.82,3.75,3.8,3.9,3.79,3.75,3.74,3.75,3.81,3.66,3.75,3.79,3.79,3.69,3.71,3.76,3.67,3.69,3.72,3.77,3.93,3.68,3.82,3.87,3.84,3.89,3.9,3.88,3.82,3.75,3.74,3.77,3.98,3.84,3.79,3.88,3.81,3.96,3.81,3.8,3.74,3.89,3.84,3.83,3.94,3.79,3.93,3.89,3.76,3.96,4.07,3.94,3.84,3.84,3.83,3.81,3.92,3.81,3.89,4.12,4.06,4.07,4.03,4.07,3.98,4.11,4.21,4.33,4.2,4.34,4.19,4.25  ],
    ["Nut milk (1.89 litres)","Nut milk","1.89 litres","Dairy",3.79,3.84,3.98,3.96,3.93,3.89,3.9,3.86,3.82,3.78,3.84,3.89,3.72,3.81,3.76,3.83,3.77,3.81,3.88,3.78,3.74,3.7,3.73,3.82,3.65,3.8,3.84,3.84,3.85,3.87,3.94,3.86,3.79,3.78,3.78,3.9,3.82,3.79,3.93,3.83,3.87,3.76,3.76,3.72,3.84,3.81,3.81,3.9,3.74,3.79,3.8,3.71,3.83,3.91,3.82,3.74,3.76,3.78,3.73,3.85,3.68,3.77,3.92,3.99,3.98,3.98,3.94,3.96,4.07,4.11,4.13,4.11,4.23,4.13,4.21  ],
    ["Cream (1 litre)","Cream","1 litre","Dairy",3.35,3.37,3.42,3.2,3.46,3.35,3.52,3.47,3.45,3.27,3.48,3.25,3.52,3.59,3.32,3.4,3.47,3.38,3.55,3.63,3.61,3.67,3.58,3.59,3.65,3.75,3.61,3.39,3.58,3.61,3.77,3.78,3.78,3.46,3.62,3.6,3.71,3.86,3.85,3.75,3.72,3.85,3.77,3.79,3.74,3.64,3.59,3.57,3.76,3.83,3.84,3.83,3.88,3.81,4,4.05,3.92,3.85,3.78,3.82,3.91,4.16,4.15,4.06,4.23,4.23,4.35,4.35,4.27,4.02,4.2,3.98,4.47,4.45,4.43  ],
    ["Butter (454 grams)","Butter","454 grams","Dairy",4.1,4.15,4.49,4.2,4.37,4.18,3.87,4.29,3.78,3.86,3.97,4.02,4.17,4.14,3.71,4.05,4.07,4.02,3.88,4.1,3.73,4.11,3.92,4.03,4.4,4.16,4.41,3.64,4.1,4.13,4.04,4.16,3.9,3.95,3.83,3.96,4.15,4.65,4.56,4.5,4.41,4.44,4.02,4.38,4.1,4.31,4.27,4.77,4.41,4.87,4.09,5.07,5.05,5.07,4.85,5.08,4.38,4.75,4.51,4.93,4.72,5.36,5.11,5.25,5.82,6.11,5.72,5.44,4.97,5.7,5.5,6.16,5.87,6.42,5.5  ],
    ["Margarine (907 grams)","Margarine","907 grams","Dairy",4.23,3.91,4.1,4.36,4.47,4.18,4.1,4.35,4.51,4.53,4.18,4.16,4.24,4.1,4.24,4.59,4.44,4.43,4.55,4.58,4.26,4.45,4.22,4.2,4.33,4.43,4.35,4.48,4.4,4.46,4.46,4.58,4.33,4.44,4.1,4.17,4.36,4.08,4.44,4.7,4.33,4.29,4.31,4.69,4.51,4.32,4.26,4.36,4.51,4.65,4.47,4.78,4.73,4.89,4.79,5.01,5.05,4.97,5.16,4.98,5.15,5.33,5.78,6.24,6.25,6.4,6.56,7.02,7.08,6.95,7.11,7.08,7.15,7.03,7.3  ],
    ["Block cheese (500 grams)","Block cheese","500 grams","Dairy",5.82,5.94,5.87,5.47,5.92,5.81,5.85,5.99,5.7,5.56,5.78,5.42,5.72,5.88,5.52,5.86,5.89,5.85,5.8,5.86,5.87,5.58,5.6,5.36,5.85,5.72,5.97,5.86,6.02,5.95,6.03,5.86,5.92,5.63,5.87,5.53,5.87,5.89,6.11,6.22,6.21,6.24,6.14,6.23,6.07,5.88,6.05,6.06,6.17,6.17,6.02,6.3,6.37,6.27,6.35,6.29,6.28,6.02,6.24,6.03,6.3,6.44,6.61,6.65,6.76,6.74,6.75,6.66,6.79,6.37,6.61,6.37,6.76,6.63,6.61  ],
    ["Yogurt (500 grams)","Yogurt","500 grams","Dairy",2.48,2.57,2.65,2.66,2.65,2.56,2.65,2.65,2.56,2.63,2.6,2.59,2.52,2.56,2.57,2.59,2.56,2.58,2.65,2.58,2.59,2.67,2.62,2.61,2.7,2.7,2.69,2.71,2.62,2.66,2.66,2.61,2.62,2.63,2.57,2.6,2.63,2.59,2.7,2.66,2.68,2.76,2.69,2.69,2.7,2.7,2.71,2.75,2.65,2.71,2.72,2.75,2.78,2.78,2.82,2.87,2.83,2.84,2.84,2.85,2.8,2.94,2.98,2.98,3.03,3,3.02,3.04,2.99,3,3.05,3.26,3.16,3.13,3.19  ],
    ["Eggs (1 dozen)","Eggs","1 dozen","Meat / protein",3.01,3.04,3.06,3.09,3.11,3.15,3.12,3.11,3.11,3.13,3.24,3.15,3.2,3.26,3.28,3.27,3.12,3.39,3.13,3.36,3.29,3.23,3.42,3.42,3.3,3.38,3.32,3.37,3.41,3.47,3.31,3.35,3.38,3.43,3.5,3.6,3.45,3.58,3.53,3.71,3.7,3.7,3.77,3.82,3.84,3.85,3.86,3.85,3.86,3.91,4.05,4.07,4,4.05,3.82,4.13,3.99,4.17,4.03,3.95,3.91,4.07,4.19,4.04,4.24,4.19,4.29,4.39,4.68,4.52,4.59,4.36,4.38,4.52,4.45  ],
    ["Apples (per kilogram)","Apples","per kilogram","Fruit",3.75,3.8,3.82,3.92,3.88,4.28,4.2,4.24,3.68,3.37,3.57,3.95,3.98,3.93,4.15,4.11,4.1,4.37,4.31,4.5,3.78,3.33,3.86,4.47,4.36,4.31,4.86,4.79,5.03,5.16,4.96,5,4.23,3.7,4.13,4.54,4.28,4.21,4.61,4.53,4.66,4.73,4.81,4.82,3.97,3.99,4.46,4.93,4.76,4.47,4.91,4.72,5,5.04,5.32,5.35,4.21,4.05,4.41,5.35,5.01,4.85,5.41,5.42,5.58,5.69,5.71,6.01,4.77,4.27,5.07,5.87,5.36,5.61,5.95  ],
    ["Oranges (per kilogram)","Oranges","per kilogram","Fruit",2.71,2.96,3.07,3.28,3.49,4.02,3.28,3.19,3.09,2.92,3.42,3.36,2.91,3.24,3.13,2.99,3.23,3.63,3.22,3.34,3.05,3.38,3.78,3.48,3.23,3.22,3.46,3.46,3.69,3.78,3.29,3.28,3.05,3.19,3.45,3.78,3.52,3.21,3.58,3.78,3.92,4.17,3.97,3.73,3.15,3.62,3.63,3.97,3.69,3.38,3.61,3.59,3.98,3.93,3.66,3.69,3.42,3.56,3.62,4.16,4.17,3.72,4.58,4.2,4.54,4.43,4.67,4.5,3.6,4.01,3.8,4.08,4.11,3.61,4.37  ],
    ["Oranges (1.36 kilograms)","Oranges","1.36 kilograms","Fruit",3.95,4.16,4.07,4.37,4.81,5.51,4.69,4.48,4.32,4.21,4.68,4.69,4.23,4.67,4.44,4.28,4.58,5.04,4.62,4.71,4.26,4.74,5.19,4.84,4.66,4.33,4.42,4.3,4.24,4.84,4.46,4.47,4.17,4.39,4.69,4.5,4.15,4.05,4.25,4.54,4.99,5.3,5.2,5.13,4.5,4.39,4.64,4.51,4.6,4.57,4.62,4.64,4.92,5.02,4.84,5.02,4.6,4.52,4.78,5.21,5.18,5.19,5.65,5.65,5.81,5.79,5.75,5.88,5.21,5.32,5.31,5.72,5.59,5.28,5.76  ],
    ["Bananas (per kilogram)","Bananas","per kilogram","Fruit",1.58,1.59,1.59,1.6,1.6,1.59,1.58,1.58,1.58,1.59,1.58,1.58,1.6,1.61,1.61,1.61,1.62,1.62,1.61,1.62,1.6,1.61,1.61,1.61,1.62,1.62,1.62,1.62,1.62,1.62,1.6,1.61,1.6,1.61,1.6,1.59,1.6,1.61,1.61,1.62,1.61,1.6,1.59,1.6,1.6,1.61,1.61,1.61,1.63,1.62,1.62,1.62,1.62,1.61,1.61,1.61,1.61,1.61,1.61,1.65,1.67,1.67,1.67,1.67,1.68,1.68,1.68,1.7,1.71,1.69,1.7,1.71,1.72,1.71,1.69  ],
    ["Pears (per kilogram)","Pears","per kilogram","Fruit",3.58,3.77,3.89,3.93,4.04,4.11,4,3.99,3.51,3.44,3.65,3.92,4.01,3.83,4.04,4.06,4.1,4.14,4.01,4.43,3.89,3.93,3.98,3.95,3.81,3.85,4.25,4.34,4.23,4.46,4.08,4.3,3.89,4.08,4.24,4.56,4.18,4.5,4.51,4.5,4.54,4.56,4.69,4.74,4.07,4.45,4.7,4.78,4.73,4.61,4.48,4.44,4.51,4.38,4.46,4.57,4.38,4.73,4.62,5.01,4.96,4.8,5.08,5.03,5.2,5.08,5.14,5.89,5.07,5.57,5.61,5.74,5.59,6.02,5.65  ],
    ["Lemons (unit)","Lemons","unit","Fruit",0.88,0.88,0.88,0.85,0.91,0.97,0.87,0.82,0.75,0.74,0.87,0.96,1,0.98,0.99,1.02,0.94,0.86,0.81,0.84,0.8,0.82,0.84,0.83,0.8,0.75,0.78,0.82,0.81,0.8,0.8,0.82,0.79,0.79,0.87,0.85,0.83,0.8,0.8,0.84,0.83,0.82,0.8,0.84,0.8,0.82,0.83,0.89,0.88,0.83,0.85,0.88,0.87,0.84,0.82,0.8,0.83,0.84,0.89,0.92,0.95,0.92,0.93,0.9,0.92,0.89,0.88,0.89,0.9,0.9,0.92,0.94,0.91,0.97,0.94  ],
    ["Limes (unit)","Limes","unit","Fruit",0.42,0.48,0.52,0.54,0.52,0.45,0.43,0.47,0.44,0.41,0.41,0.48,0.47,0.49,0.64,0.66,0.56,0.49,0.47,0.49,0.45,0.43,0.46,0.52,0.47,0.47,0.56,0.7,0.65,0.58,0.46,0.52,0.57,0.53,0.52,0.59,0.56,0.5,0.61,0.59,0.57,0.52,0.52,0.58,0.62,0.54,0.55,0.61,0.58,0.53,0.65,0.67,0.64,0.63,0.63,0.6,0.59,0.61,0.64,0.7,0.76,0.86,0.98,0.99,0.92,0.75,0.67,0.7,0.68,0.73,0.78,0.81,0.8,0.83,0.85  ],
    ["Grapes (per kilogram)","Grapes","per kilogram","Fruit",7.22,5.85,5.74,6.33,7.17,4.68,5.49,5.16,4.62,4.94,5.26,6.59,6.73,5.24,4.84,5.83,6.04,5.63,6.51,5.3,4.5,4.93,4.72,5.69,6.02,6.62,5.8,6,6.92,5.57,4.92,5.08,4.87,4.71,5.39,6.02,6.03,6.12,5.34,6,6.59,5.62,5.24,5.72,5.29,5.18,5.51,5.94,5.94,5.84,6.28,5.39,6.7,6.41,6.21,6.17,5.54,5.14,5.93,6.52,6.94,7.29,6.9,6.36,7.56,6.1,6.64,6.6,6.15,5.28,6.56,7.72,7.15,7.55,6.7  ],
    ["Cantaloupe (unit)","Cantaloupe","unit","Fruit",2.97,2.54,2.24,2.44,2.36,2.87,3.18,2.11,2.29,2.37,2.78,2.61,2.72,2.04,1.83,2.41,2.41,3.18,2.98,1.94,2.36,2.59,3.25,3.19,2.8,2.73,2.74,2.75,2.91,3.55,2.46,2.31,2.36,3.06,3.54,3.12,2.71,2.19,2.18,2.9,3.13,3.29,3.36,2.32,2.78,3.74,3.17,3.09,3.44,3.65,2.89,2.82,2.9,3.44,3.33,2.57,2.94,3.64,3.84,3.23,3.37,3.55,2.95,3.28,4.09,4.24,4.15,2.79,3.61,4.43,4.65,3.75,3.64,3.86,3.15  ],
    ["Strawberries (454 grams)","Strawberries","454 grams","Fruit",3.26,3.03,2.95,2.97,2.93,2.85,2.75,2.92,3.08,2.93,4.22,3.72,3.75,2.75,2.84,3.33,2.55,2.51,2.7,2.88,3.15,3.19,4.01,6.06,4.98,3.47,3.03,3.09,2.62,3.33,3.18,2.98,3.41,3.66,4.79,6.24,4.51,3.2,3.32,3.22,2.97,2.93,3.7,4.2,3.7,5.07,5.35,5.03,4.27,4.41,3.23,3.57,3.54,3.28,3.61,3.72,4.04,4.4,5.83,5.79,4.66,3.84,3.36,4.11,3.79,3.69,4.13,4.71,4.67,5.45,6.74,6.13,4.6,4.49,3.84  ],
    ["Avocado (unit)","Avocado","unit","Fresh vegetables",1.51,1.52,1.66,1.92,2.14,2.11,2.01,2.02,1.91,1.76,1.42,1.63,1.48,1.53,1.64,1.6,1.64,1.77,1.79,1.83,1.78,1.62,1.64,1.73,1.7,1.67,1.67,1.89,2.11,2.19,2.07,2.03,1.97,1.82,1.75,1.79,1.74,1.69,1.79,1.97,1.99,1.95,1.97,1.75,1.71,1.58,1.58,1.61,1.55,1.47,1.59,1.76,1.73,1.82,1.75,1.81,1.81,1.73,1.66,1.76,1.88,2,2.07,2.35,2.46,2.42,2.19,2.18,1.74,1.81,1.76,1.87,1.8,1.65,1.71  ],
    ["Potatoes (4.54 kilograms)","Potatoes","4.54 kilograms","Fresh vegetables",4.2,4,4.15,3.99,4.28,4.75,5.07,4.55,3.72,3.6,3.78,3.72,3.92,4.03,3.82,3.92,4.12,4.88,5.04,4.85,3.79,3.6,4.05,4.19,5.07,4.42,4.56,4.3,5.15,5.54,5.72,4.89,4.02,3.35,3.96,4.03,4.76,4.48,4.91,5.15,5.05,4.98,4.64,4.67,3.94,3.39,4.15,3.87,4.47,4.2,4.17,5.1,5.19,5.07,4.96,4.64,4.11,3.43,4.22,4.22,4.63,3.95,4.42,4.36,5.26,4.9,5.24,5.6,4.61,3.69,4.99,4.37,5.24,4.83,4.95  ],
    ["Potatoes (per kilogram)","Potatoes","per kilogram","Fresh vegetables",2.99,2.96,2.97,3.03,3.14,3.35,3.41,3.26,3.08,3.03,3.26,3.29,3.35,3.36,3.51,3.57,3.6,3.67,3.69,3.75,3.62,3.58,3.52,3.63,3.63,3.72,3.91,3.92,4.05,4.09,4.04,4.23,4.22,4.13,4.07,4.09,3.85,3.87,4.08,4.21,4.39,4.35,4.39,4.2,4.12,3.95,3.89,4.15,4.28,4.25,4.22,4.22,4.33,4.22,4.28,4.2,4.2,4.2,4.13,4.21,4.14,4.21,4.13,4.18,4.64,4.87,5.14,4.84,4.73,4.68,4.68,4.67,4.59,4.76,4.81  ],
    ["Sweet potatoes (per kilogram)","Sweet potatoes","per kilogram","Fresh vegetables",2.85,2.95,2.89,2.64,3.25,3.56,3.47,3.55,3.26,2.67,3.06,2.51,3.01,3.3,2.91,3.18,3.44,3.51,3.71,3.83,3.48,3.05,3.46,2.74,3.29,3.44,3.82,3.19,4.02,4.02,4.05,4.24,4.02,3.23,3.5,2.98,3.67,3.44,3.93,3.76,4.14,4.21,4.19,4.19,3.8,3.34,3.62,3.15,3.67,3.75,3.67,3.8,3.97,3.87,3.86,4.08,3.83,3.17,3.54,3.08,3.63,3.66,3.67,3.41,4.11,4.18,4.18,4.36,3.9,3.28,4.06,3.32,4.06,3.99,3.96  ],
    ["Tomatoes (per kilogram)","Tomatoes","per kilogram","Fresh vegetables",4.48,4.19,3.83,3.34,3.13,3.35,3.13,3.1,3.08,3.23,3.95,5.3,5.55,4.5,4.2,3.59,3.21,3.39,3.39,3.27,3.36,3.8,4.79,6.04,5.86,4.95,4.48,3.83,3.57,3.51,3.66,3.61,3.49,3.71,4.67,5.95,6.7,6.56,6.38,5.19,4.76,5.24,5.6,5.12,5.07,5.53,5.51,5.95,6.44,5.74,4.8,3.7,3.6,3.71,3.91,3.77,3.95,4.42,5.22,5.59,5.75,5.44,4.57,4.21,4.11,4.04,4.35,4.21,4.19,4.57,6.32,6.99,6.85,5.85,5.25  ],
    ["Cabbage (per kilogram)","Cabbage","per kilogram","Fresh vegetables",1.78,1.84,1.88,1.96,2.31,2.51,2.06,1.83,1.61,1.59,1.53,1.67,1.81,1.97,1.97,2.08,2.16,2.28,2.07,2.07,1.87,1.96,1.98,2.31,2.52,2.6,2.72,3.05,3.21,3.37,2.84,2.37,2.09,1.99,1.95,2.22,2.28,2.22,2.08,2.15,2.48,3.1,2.77,2.25,2.1,2.02,1.99,2.16,2.37,2.35,2.29,2.41,2.45,2.55,2.38,2.12,1.96,1.9,1.9,2.09,2.2,2.33,2.35,2.42,2.71,2.94,2.73,2.46,2.22,2.17,2.44,2.42,2.59,2.64,2.61  ],
    ["Carrots (1.36 kilograms)","Carrots","1.36 kilograms","Fresh vegetables",2.46,2.68,2.82,2.91,3.23,3.4,3.28,2.86,2.66,2.49,2.21,2.54,2.57,2.74,3.05,3.26,3.33,3.53,3.46,3.11,2.71,2.4,2.53,2.64,2.89,2.96,3.18,3.27,3.81,3.86,3.64,3.19,2.98,2.6,2.5,2.82,2.86,2.96,3.02,3.57,3.81,3.88,3.72,3.02,3.07,2.96,2.99,3.01,3.19,3.23,3.34,3.36,3.5,3.67,3.56,3.08,3.23,2.83,2.87,2.99,3.05,3.31,3.66,3.93,4.29,4.38,4.41,3.89,3.74,3.35,3.25,3.53,3.54,3.74,4.06  ],
    ["Onions (per kilogram)","Onions","per kilogram","Fresh vegetables",3.11,3.27,3.27,3.21,3.38,3.47,3.56,3.62,3.56,3.59,3.62,3.71,3.63,3.7,3.75,3.65,3.61,3.6,3.77,3.84,3.65,3.62,3.72,3.84,3.76,3.81,4.1,4.35,4.53,4.65,4.61,4.56,4.29,4.42,4.26,4.32,4,4.08,4.17,4.33,4.22,4.37,4.36,4.29,4.26,4.39,4.37,4.46,4.27,4.28,4.32,4.14,4.29,4.26,4.39,4.44,4.33,4.32,4.44,4.5,4.57,4.83,5.13,5.28,5.37,5.51,5.64,5.56,5.4,5.35,5.27,5.34,5.24,5.41,5.3  ],
    ["Onions (1.36 kilograms)","Onions","1.36 kilograms","Fresh vegetables",2.76,2.9,2.93,2.96,3.1,3.32,3.49,3.4,3.36,3.14,2.95,3.05,3.1,3.05,3.2,3.13,3.15,3.36,3.67,3.59,3.27,3.11,3.16,3.22,3.43,3.5,3.76,3.87,4.21,4.34,4.61,4.13,3.72,3.52,3.3,3.54,3.44,3.43,3.45,3.67,3.86,3.91,4.01,3.69,3.8,3.72,3.62,3.65,3.66,3.61,3.8,3.74,3.85,3.95,4,3.88,3.91,3.59,3.63,3.71,3.69,4.01,4.11,4.42,4.69,4.75,4.91,4.93,4.6,4.25,4.08,4.34,4.22,4.37,4.19  ],
    ["Celery (unit)","Celery","unit","Fresh vegetables",2.21,2.09,2.14,2.18,2.86,3.32,2.53,1.78,1.51,1.55,2.16,2.31,2.31,2.2,2.19,2.27,2.46,2.53,2.42,1.92,1.73,1.91,2.45,3.02,3,3.35,3.98,4.76,5.18,5.22,3.53,2.19,1.98,2.17,2.74,2.82,2.83,2.69,2.67,2.76,2.72,2.76,2.63,2.03,2.27,2.27,2.54,2.51,2.91,2.88,2.63,2.39,2.59,2.68,2.33,2.2,2.13,2.32,2.7,2.68,2.83,2.96,3.33,3.08,3.35,3.64,2.78,2.41,2.31,2.43,3.17,3.64,4.22,4.02,3.63  ],
    ["Cucumber (unit)","Cucumber","unit","Fresh vegetables",1.67,1.65,1.26,1.14,1.13,1.19,1.13,1.07,1.19,1.36,1.63,1.74,1.74,1.61,1.37,1.14,1.23,1.24,1.24,1.21,1.41,1.76,1.86,1.93,1.91,1.87,1.37,1.19,1.25,1.24,1.26,1.42,1.54,1.77,1.88,1.95,1.94,1.82,1.43,1.36,1.31,1.3,1.42,1.49,1.6,1.87,1.96,1.69,1.9,1.91,1.41,1.25,1.32,1.5,1.48,1.54,1.53,1.82,2.02,1.79,1.9,1.85,1.45,1.33,1.36,1.3,1.34,1.38,1.61,1.86,1.66,1.82,2.01,2.37,1.77  ],
    ["Mushrooms (227 grams)","Mushrooms","227 grams","Fresh vegetables",1.72,1.73,1.66,1.64,1.77,1.78,1.74,1.81,1.64,1.67,1.74,1.79,1.71,1.75,1.87,1.88,1.91,1.95,1.89,1.99,1.85,1.84,1.93,1.9,1.84,1.87,1.94,1.9,1.91,2.07,2,2.11,2.01,1.85,1.88,1.89,1.93,1.8,2.07,1.99,2.27,2.14,2.26,2.16,2.32,2.03,2.23,2.1,2.16,1.99,1.95,2.17,2.27,2.4,2.2,2.32,2.11,2.17,2.24,2.18,2.2,2.39,2.15,2.32,2.46,2.3,2.37,2.49,2.11,2.35,2.23,2.49,2.31,2.55,2.23  ],
    ["Iceberg lettuce (unit)","Iceberg lettuce","unit","Fresh vegetables",1.73,1.71,2.02,2.43,2.37,1.99,1.59,1.5,1.38,1.86,2,1.89,1.96,1.89,2.09,2.09,2.09,1.95,1.75,1.74,1.72,1.85,2.55,3.57,2.62,2.16,2.69,2.57,2.6,2.3,1.87,1.96,1.9,2.18,2.82,2.73,2.54,2.19,2.39,2.44,2.31,2.41,1.92,1.93,1.96,2.84,2.88,2.79,2.47,2.24,2.24,2.29,2.26,2.15,1.89,1.97,2.04,2.51,3.57,2.65,2.42,2.58,3.1,3.18,2.86,2.72,2.1,2.2,2.5,3.23,4.32,4.35,3.42,3.01,2.92  ],
    ["Romaine lettuce (unit)","Romaine lettuce","unit","Fresh vegetables",2.09,2.14,2.42,3.2,2.78,1.85,1.39,1.32,1.39,1.69,2.22,2.22,2.21,2.27,2.49,2.59,2.5,1.9,1.54,1.5,1.7,2.14,2.6,3.31,2.77,2.66,2.87,2.77,2.85,2.19,1.8,1.89,2,2.39,2.94,3.04,2.96,2.83,2.95,2.9,2.76,2.44,1.93,1.97,2.21,3.36,3.56,3.25,3.22,3.12,2.83,2.63,2.48,2.01,1.75,1.76,2.01,2.47,3.31,3.23,3.1,3.17,3.76,3.58,3.19,2.67,2,2.1,2.65,3.53,4.64,4.53,4.11,3.58,3.29  ],
    ["Broccoli (unit)","Broccoli","unit","Fresh vegetables",2.02,2.46,2.29,2.91,2.89,2.94,2.08,1.72,1.56,1.69,2.45,2.41,2.42,2.11,2.14,2.23,2.48,2.78,2.28,2.05,1.79,2.05,2.64,2.97,2.71,2.49,2.65,2.33,2.62,3.05,2.29,2.07,2.02,2.11,2.58,2.52,2.4,2.43,2.25,2.55,2.62,2.67,2.44,2.25,2.32,2.43,2.77,2.69,2.77,2.33,2.41,2.56,2.53,2.48,2.26,2.35,2.17,2.44,3,3.04,2.64,2.77,2.73,2.56,2.74,2.71,2.49,2.35,2.13,2.36,2.88,3.22,3.28,3.11,2.83  ],
    ["Peppers (per kilogram)","Peppers","per kilogram","Fresh vegetables",6.23,5.73,5.99,6.04,6.16,6.49,6.18,5.21,4.02,4.97,6.53,7.52,7.21,6.3,6.95,6.39,6.83,7.04,7.08,5.71,4.25,6.33,7.65,8.12,8.06,7.27,8.44,7.66,7.45,7.74,7.98,5.97,4.34,5.94,7.09,7.48,7.39,7.43,7.59,7.14,7.58,8.31,8.45,5.92,5.19,7.01,7.46,8.06,8.39,8.25,7.46,6.36,7.09,7.06,6.97,5.45,4.98,6.25,7.38,7.7,7.89,7.65,7.7,7.22,7.56,7.47,7.15,5.96,5.5,6.76,8.5,8.92,8.98,8.83,8.29  ],
    ["Squash (per kilogram)","Squash","per kilogram","Fresh vegetables",3.42,3.44,3.39,3.4,3.87,4.26,4.18,4,2.63,2.38,2.55,3.12,3.61,3.82,3.73,3.69,4.04,4.17,4.08,3.85,2.78,2.66,2.92,3.47,4.05,4.28,4.21,4.27,4.71,4.67,4.29,4.26,3.17,2.9,2.82,3.62,4.19,4.21,4.38,4.56,4.63,4.66,4.48,4.27,3.19,2.99,2.98,3.83,4.31,4.36,4.17,4.12,4.12,4.08,4.21,3.87,3.06,2.92,3.08,3.59,4.02,4.53,4.44,4.05,4.53,4.87,4.96,4.63,3.43,3.12,3.53,4.16,4.48,4.75,4.84  ],
    ["Salad greens (142 grams)","Salad greens","142 grams","Fresh vegetables",3.5,3.69,3.66,3.72,3.85,3.85,3.96,4.07,4.08,4.01,4.03,4,3.94,3.88,4.04,3.89,4,3.81,3.91,4,4.05,4.03,4.1,4.27,4,3.94,4.16,4.02,4.05,3.99,4.02,4.04,4.11,3.96,3.99,4.05,4.04,3.89,4.03,3.98,4.05,3.98,3.99,4.06,3.99,4.01,3.96,4.08,3.98,4.02,4.11,3.96,4.05,4.03,4.1,4.1,4.11,3.99,3.97,4.14,4.09,4.09,4.21,4.27,4.41,4.38,4.22,4.37,4.41,4.53,4.63,4.5,4.49,4.48,4.59  ],
    ["Frozen french fried potatoes (750 grams)","Frozen french fried potatoes","750 grams","Frozen foods",2.1,2.1,2.04,2.09,2.12,2.08,2.1,2.13,2.11,2.13,2.14,2.14,2.06,2.08,2.09,2.19,2.16,2.14,2.15,2.16,2.14,2.18,2.17,2.22,2.24,2.22,2.23,2.26,2.31,2.25,2.21,2.27,2.29,2.38,2.34,2.33,2.3,2.12,2.4,2.39,2.36,2.4,2.3,2.15,2.29,2.36,2.4,2.45,2.39,2.47,2.46,2.47,2.48,2.5,2.55,2.46,2.46,2.48,2.49,2.58,2.48,2.57,2.56,2.61,2.67,2.71,2.7,2.8,2.9,2.94,2.84,2.95,2.86,2.99,3.07  ],
    ["Frozen green beans (750 grams)","Frozen green beans","750 grams","Frozen foods",2.95,3,3.16,2.96,3.23,3.3,3.37,3.37,3.11,3.04,3.16,2.95,3.24,3.19,2.93,3.12,3.07,3.13,3.21,3.1,3.07,3.08,3.25,3.05,3.35,3.25,3.34,3.31,3.4,3.37,3.33,3.24,3.3,3.2,3.33,3.1,3.36,3.3,3.47,3.41,3.43,3.42,3.34,3.36,3.24,3.16,3.28,3.15,3.18,3.48,3.57,3.55,3.58,3.49,3.44,3.4,3.33,3.23,3.41,3.32,3.49,3.47,3.5,3.35,3.51,3.43,3.53,3.51,3.53,3.5,3.67,3.56,3.58,3.77,3.94  ],
    ["Frozen broccoli (500 grams)","Frozen broccoli","500 grams","Frozen foods",3.04,3.08,3.04,2.73,3.08,3.06,3.28,3.21,2.94,3.06,2.98,2.97,3.14,2.97,2.84,3.08,2.98,2.98,3.18,3.02,2.9,3,3,2.73,3.14,2.94,3.16,2.81,3.21,3.17,3.2,3.03,3.02,2.9,3.04,2.81,2.98,3.14,3.35,3.31,3.31,3.38,3.51,3.38,3.11,2.99,3.14,2.98,2.96,3.28,3.41,3.53,3.65,3.64,3.81,3.73,3.33,3.25,3.46,3.21,3.43,3.5,3.83,3.27,3.66,3.49,3.71,3.78,3.74,3.75,3.84,3.47,3.84,3.87,4.03  ],
    ["Frozen corn (750 grams )","Frozen corn","750 grams ","Frozen foods",2.81,2.88,2.79,2.52,2.89,2.88,2.96,2.94,2.61,2.6,2.77,2.51,2.83,2.8,2.54,2.79,2.81,2.88,2.93,2.87,2.7,2.72,2.89,2.62,2.97,2.84,2.94,2.83,3.02,3.04,3.04,2.99,2.95,2.83,2.97,2.68,2.98,2.95,3.08,3.09,3.15,3.18,3.19,3.13,2.91,2.79,2.95,2.7,2.81,3.14,3.26,3.3,3.35,3.32,3.28,3.23,3.09,2.92,3.22,3.03,3.32,3.23,3.28,3,3.22,3.18,3.27,3.19,3.22,3.22,3.35,3.23,3.33,3.48,3.58  ],
    ["Frozen mixed vegetables (750 grams)","Frozen mixed vegetables","750 grams","Frozen foods",3.08,3.16,3.16,2.91,3.13,3.11,3.27,3.2,3.02,2.97,3.04,2.93,3.04,3.05,2.93,3.08,3.01,3.08,3.12,3.05,2.97,3.03,3.14,2.9,3.12,3.02,3.17,3.06,3.08,3.12,3.11,3.12,3.06,3.05,3.17,2.95,3.18,3.12,3.26,3.33,3.36,3.34,3.33,3.3,3.17,3.08,3.12,3.06,3.05,3.16,3.21,3.28,3.38,3.38,3.41,3.39,3.26,3.2,3.45,3.32,3.48,3.44,3.44,3.26,3.41,3.4,3.44,3.37,3.45,3.38,3.42,3.41,3.48,3.65,3.77  ],
    ["Frozen peas (750 grams)","Frozen peas","750 grams","Frozen foods",2.9,2.96,2.84,2.57,2.92,2.89,2.97,2.96,2.66,2.66,2.82,2.57,2.86,2.86,2.57,2.81,2.83,2.88,2.92,2.89,2.74,2.76,2.91,2.66,2.98,2.86,2.98,2.85,3,3.04,3.01,2.98,2.96,2.85,2.96,2.75,3.01,2.96,3.07,3.02,3.13,3.12,3.11,3.11,2.92,2.81,2.94,2.75,2.86,3.09,3.12,3.14,3.18,3.12,3.05,3.1,3.01,2.86,3.12,2.99,3.25,3.17,3.19,2.98,3.12,3.12,3.19,3.16,3.22,3.21,3.36,3.28,3.33,3.48,3.57  ],
    ["Frozen pizza (390 grams)","Frozen pizza","390 grams","Frozen foods",4.1,3.78,3.83,4.08,4.11,4.02,4.1,3.89,3.99,3.93,3.84,3.94,3.78,3.89,3.9,3.86,4.01,4.05,3.95,3.99,3.77,4.13,3.95,3.95,4.13,4.14,4.14,3.83,4.11,4.21,3.97,4.06,3.84,4.06,4.05,4.12,3.92,4.21,4.06,4.2,4.44,4.35,4.24,4.43,3.97,4.14,3.96,4.02,4.23,4.03,4.04,4.03,4.24,4.25,4.36,4.14,4,4.31,4.02,4.04,4.14,4.13,4.29,4.2,4.19,4.14,4.19,4.28,4.12,4.42,4.36,4.27,4.81,4.6,4.73  ],
    ["Frozen spinach (300 grams)","Frozen spinach","300 grams","Frozen foods",1.52,1.5,1.47,1.41,1.49,1.52,1.5,1.53,1.53,1.49,1.48,1.6,1.53,1.58,1.5,1.48,1.53,1.52,1.57,1.45,1.42,1.42,1.55,1.64,1.56,1.54,1.48,1.57,1.51,1.54,1.61,1.52,1.49,1.38,1.53,1.54,1.65,1.78,1.8,1.75,1.51,1.73,1.66,1.56,1.39,1.29,1.57,1.73,1.77,1.89,1.58,1.86,1.74,1.82,2,2,1.77,1.56,1.79,1.67,1.81,1.76,1.79,1.8,1.71,1.7,1.88,1.93,2.13,1.97,2.03,2.14,1.98,2.19,2.07  ],
    ["Frozen strawberries (600 grams)","Frozen strawberries","600 grams","Frozen foods",4.36,4.7,4.48,4.56,4.47,4.71,4.47,4.61,4.39,4.32,4.41,4.12,4.32,4.12,3.96,3.98,4.16,4.17,4.2,4.23,4.25,4.33,4.38,4.12,4.19,4.32,4.32,4.04,4.4,4.37,4.21,4.28,4.33,4.23,4.4,4.18,4.21,4.47,4.55,4.62,4.62,4.58,4.26,4.18,4.29,4.31,4.35,4.24,4.26,4.44,4.36,4.45,4.48,4.41,4.47,4.56,4.39,4.46,4.65,4.77,4.66,4.7,4.78,4.65,4.96,4.91,5.09,5.16,4.95,4.82,4.92,4.73,5.3,5.36,5.25  ],
    ["White bread (675 grams)","White bread","675 grams","Grain / carbs",2.78,2.85,2.81,2.75,2.87,2.91,2.89,2.9,2.8,2.84,2.77,2.93,2.83,2.79,2.8,2.76,2.84,2.87,2.8,2.85,2.73,2.77,2.8,2.85,2.9,2.83,2.84,2.83,2.86,2.94,2.88,2.9,2.87,2.84,2.83,2.93,2.93,2.9,2.9,3.05,2.96,3.04,3,3.02,2.98,2.93,2.94,3,2.97,2.97,2.96,3.03,2.97,2.96,2.98,3.09,3.04,2.95,3.02,3.12,3.08,3.19,3.29,3.37,3.37,3.39,3.5,3.53,3.44,3.39,3.59,3.7,3.65,3.55,3.64  ],
    ["Flatbread and pita (500 grams)","Flatbread and pita","500 grams","Grain / carbs",2.75,2.8,2.62,2.52,2.72,2.74,2.79,2.83,2.8,2.73,2.8,2.79,2.76,2.55,2.62,2.63,2.74,2.78,2.8,2.79,2.91,2.74,2.85,2.86,2.9,2.83,2.8,2.83,2.85,2.79,2.83,2.81,2.89,2.72,2.9,2.97,2.94,2.91,2.92,2.84,2.86,2.81,2.89,3.02,2.86,2.83,2.8,2.92,3.06,2.84,2.84,2.88,2.92,2.8,2.87,2.96,3,2.84,2.85,2.98,2.99,3.01,3.01,3.14,3.16,3.2,3.37,3.47,3.52,3.5,3.65,3.77,3.84,3.91,3.79  ],
    ["Crackers and crisp breads (200 grams)","Crackers and crisp breads","200 grams","Snacks / drinks",2.29,2.44,2.47,2.36,2.41,2.32,2.4,2.36,2.35,2.37,2.38,2.15,2.4,2.46,2.28,2.52,2.33,2.36,2.43,2.39,2.39,2.47,2.42,2.26,2.55,2.49,2.36,2.34,2.57,2.45,2.53,2.46,2.42,2.38,2.35,2.17,2.38,2.4,2.31,2.43,2.46,2.51,2.42,2.45,2.46,2.48,2.39,2.25,2.48,2.44,2.33,2.43,2.43,2.43,2.44,2.46,2.41,2.39,2.41,2.48,2.6,2.55,2.63,2.58,2.68,2.66,2.71,2.71,2.71,2.68,2.76,2.74,2.94,2.95,2.89  ],
    ["Cookies and sweet biscuits (300 grams)","Cookies and sweet biscuits","300 grams","Snacks / drinks",2.32,2.39,2.37,2.4,2.37,2.3,2.47,2.37,2.34,2.45,2.49,2.32,2.38,2.45,2.39,2.49,2.48,2.52,2.54,2.51,2.52,2.64,2.69,2.68,2.73,2.7,2.56,2.55,2.58,2.62,2.79,2.65,2.6,2.63,2.63,2.59,2.59,2.61,2.57,2.69,2.82,2.81,2.7,2.71,2.73,2.7,2.62,2.7,2.68,2.78,2.66,2.67,2.75,2.66,2.69,2.68,2.65,2.58,2.57,2.55,2.7,2.78,2.74,2.77,2.91,2.81,2.9,2.98,3,3.05,2.86,3.01,3.14,3.2,3.27  ],
    ["Dry or fresh pasta (500 grams)","Dry or fresh pasta","500 grams","Grain / carbs",2.36,2.27,2.36,2.39,2.38,2.41,2.36,2.36,2.41,2.28,2.33,2.42,2.27,2.25,2.43,2.29,2.38,2.3,2.36,2.28,2.42,2.37,2.26,2.44,2.34,2.37,2.34,2.34,2.49,2.44,2.44,2.38,2.36,2.4,2.39,2.49,2.35,2.34,2.36,2.56,2.73,2.75,2.48,2.53,2.43,2.21,2.55,2.71,2.5,2.66,2.67,2.54,2.56,2.5,2.56,2.59,2.74,2.49,2.66,2.77,2.73,2.91,3.14,3,2.92,3.02,3.16,3.25,3.45,3.4,3.41,3.64,3.63,3.67,3.73  ],
    ["Brown rice (900 grams)","Brown rice","900 grams","Grain / carbs",4.27,4.27,4.31,4.34,4.38,4.4,4.38,4.39,4.33,4.33,4.34,4.34,4.31,4.35,4.38,4.41,4.41,4.35,4.35,4.32,4.26,4.26,4.29,4.17,4.25,4.26,4.34,4.17,4.33,4.24,4.31,4.36,4.31,4.33,4.46,4.49,4.6,4.62,4.76,4.74,4.84,4.83,4.77,4.64,4.67,4.72,4.79,4.92,4.8,4.96,4.88,4.87,4.93,4.97,5.02,4.97,4.86,4.92,5.02,5.03,5.1,5.12,5.22,5.4,5.47,5.57,5.6,5.76,5.84,5.82,5.79,5.66,5.71,5.94,6.03  ],
    ["White rice (2 kilograms)","White rice","2 kilograms","Grain / carbs",6.94,7.09,7.13,7.08,7.02,7.08,7.15,7.08,7.09,7.2,7.25,7.28,7.27,7.31,7.35,7.34,7.28,7.21,7.41,7.27,7.28,7.46,7.44,7.34,7.54,7.54,7.58,7.44,7.51,7.44,7.43,7.44,7.33,7.45,7.77,8.03,8.14,8.21,8.1,8.41,8.43,8.47,8.45,8.17,8.2,8.18,8.3,8.27,8.52,8.46,8.35,8.32,8.35,8.29,8.43,8.39,8.21,8.45,8.52,8.53,8.8,9.09,9.18,9.42,9.32,9.35,9.41,9.31,9.55,9.32,9.56,9.42,9.78,9.55,9.71  ],
    ["Cereal (400 grams)","Cereal","400 grams","Grain / carbs",3.09,3.03,3.16,3.25,3.18,3.17,3.25,3.18,3.1,3.2,3.12,3.15,3.04,3.11,3.14,3.15,3.13,3.21,3.23,3.1,3.14,3.11,3.14,3.28,3.11,3.19,3.19,3.12,3.16,3.16,3.22,3.07,3.15,3.17,3.15,3.18,3.09,3.13,3.27,3.36,3.28,3.27,3.36,3.29,3.25,3.2,3.24,3.33,3.24,3.33,3.3,3.27,3.37,3.4,3.44,3.37,3.32,3.45,3.43,3.55,3.49,3.69,3.95,4.01,3.98,3.84,3.88,3.89,3.98,4.03,4.07,4.14,4.04,4.09,4.1  ],
    ["Wheat flour (2.5 kilograms)","Wheat flour","2.5 kilograms","Pantry staples",4.67,4.47,4.61,4.54,4.65,4.44,4.66,4.7,4.45,4.6,4.22,4.48,4.63,4.54,4.54,4.77,4.83,4.63,4.72,4.79,4.63,4.64,4.35,4.5,4.83,4.73,4.73,4.55,4.71,4.71,4.65,4.66,4.53,4.5,4.43,4.48,4.67,4.53,4.74,4.69,5.36,5.31,5.08,5,4.8,4.67,4.61,4.62,4.79,4.86,4.63,4.72,4.93,4.84,4.94,4.87,4.62,4.66,4.74,4.64,4.8,4.94,5.26,5.28,5.36,5.27,5.51,5.71,5.65,5.54,5.45,5.72,5.75,5.73,5.69  ],
    ["White sugar (2 kilograms)","White sugar","2 kilograms","Pantry staples",2.12,2.38,2.31,2.32,2.56,2.02,2.45,2.55,2.08,2.29,2.07,2.32,2.16,2.33,2.1,2.38,2.06,2.05,2.43,2.37,2.15,1.92,2.03,2.28,2.18,1.7,2.26,2.29,2.3,2.09,2.32,2.14,2.14,1.92,2.09,2.28,2.27,1.7,2.28,2.2,2.09,2.1,2.1,1.97,1.79,1.91,2.05,1.91,2.13,1.86,1.88,2.34,2.33,2.3,2.24,2.3,2.02,2.34,2.35,2.49,2.39,2.67,2.51,2.42,2.66,2.42,2.49,2.78,2.52,2.65,2.29,2.83,2.93,2.99,2.44  ],
    ["Apple juice (2 litres)","Apple juice","2 litres","Snacks / drinks",2.8,2.77,2.8,2.82,2.8,2.89,2.84,2.86,2.69,2.87,2.74,2.88,2.74,2.71,2.86,2.82,2.81,2.78,2.85,2.83,2.83,2.85,2.85,2.85,2.77,2.83,2.74,2.81,2.73,2.74,2.83,2.84,2.76,2.8,2.89,2.91,2.82,2.76,2.89,2.94,2.85,2.86,2.85,2.82,2.85,2.91,2.8,2.92,2.76,2.92,2.91,2.9,2.88,2.94,2.9,2.68,2.98,2.89,3.04,3.13,3.02,3.03,3.04,3.18,3.26,3.27,3.23,3.26,3.38,3.25,3.33,3.37,3.25,3.38,3.7  ],
    ["Orange juice (2 litres)","Orange juice","2 litres","Snacks / drinks",3.6,3.61,3.57,3.56,3.58,3.58,3.58,3.64,3.63,3.48,3.5,3.44,3.57,3.49,3.51,3.5,3.49,3.45,3.49,3.6,3.54,3.58,3.56,3.48,3.65,3.76,3.7,3.67,3.7,3.63,3.72,3.76,3.62,3.66,3.55,3.59,3.74,3.72,3.83,3.94,4,3.86,3.87,3.82,3.8,3.74,3.72,3.64,3.84,3.9,3.84,3.85,3.85,3.86,3.87,3.93,3.99,3.89,3.87,3.94,4.01,4.14,4.27,4.06,4.16,4.1,4.05,4.15,4.14,3.81,3.95,4.06,4,4.23,4.57  ],
    ["Roasted or ground coffee (340 grams)","Roasted or ground coffee","340 grams","Snacks / drinks",4.59,4.95,5.23,4.95,4.71,5.17,4.74,5.02,4.83,4.84,4.83,5.12,4.95,5.21,4.93,5.22,4.94,5,5.09,5.2,5.01,5.14,5.09,5.09,5.31,5.14,4.88,5.15,5.26,5.2,5.28,5.34,5.2,5.23,5.05,5.31,5.32,5.33,5.47,5.44,5.42,5.27,5.57,5.6,5.41,5.36,5.15,5.39,5.48,5.62,5.23,5.37,5.54,5.7,5.58,5.45,5.57,5.35,5.33,5.57,5.71,5.98,5.83,6,6.03,6.16,6.34,6.45,6.28,5.86,6.26,6.4,6.4,6.58,6.3  ],
    ["Tea (20 bags)","Tea","20 bags","Snacks / drinks",3.42,3.24,3.29,3.4,3.34,3.42,3.46,3.46,3.27,3.38,3.22,3.37,3.45,3.47,3.43,3.55,3.49,3.59,3.66,3.51,3.44,3.4,3.23,3.32,3.39,3.39,3.38,3.48,3.43,3.48,3.5,3.41,3.42,3.29,3.36,3.46,3.44,3.36,3.55,3.57,3.68,3.62,3.6,3.82,3.63,3.65,3.54,3.67,3.54,3.76,3.77,3.69,3.84,3.85,3.9,3.76,3.86,3.77,3.79,3.83,3.86,3.86,3.82,3.87,3.88,4.01,4.29,4.15,4.26,4.23,4.01,4.25,4.27,4.32,4.31  ],
    ["Ketchup (1 litre)","Ketchup","1 litre","Pantry staples",3.12,3.14,3.16,3.19,3.09,2.99,3.01,3.09,3.13,3.19,3.21,3.3,3.26,3.33,3.31,3.26,3.28,3.27,3.26,3.34,3.31,3.22,3.34,3.41,3.39,3.4,3.18,3.17,3.15,3.22,3.23,3.29,3.3,3.31,3.23,3.23,3.33,3.29,3.26,3.42,3.21,3.24,3.22,3.28,3.3,3.2,3.37,3.39,3.41,3.44,3.31,3.32,3.2,3.18,3.24,3.22,3.27,3.53,3.65,3.85,3.93,3.93,4.05,4.07,4.15,4.04,4.04,4.12,4.11,4.05,3.95,4.18,4.09,4.26,4.48  ],
    ["Vegetable oil (3 litres)","Vegetable oil","3 litres","Pantry staples",5.67,5.46,5.45,5.96,5.82,5.5,4.62,6.09,5.73,5.96,5.81,6.11,5.79,5.84,4,5.99,6.12,5.9,6.01,6.19,6.3,5.97,6.22,6.37,4.45,6.35,4.28,5.92,5.63,5.75,5.94,6.06,5.09,5.87,6.13,6.12,4.25,6.13,6.17,6.61,5.7,5.63,6.23,6.03,5.42,4.64,5.34,6.31,5.4,6,6.37,6.48,6.84,7.07,7.97,8.45,9.38,9.55,8.15,10.11,8.62,10.62,10.27,10.83,10.87,11.03,12.29,12.01,10.92,10.56,11.1,11.41,11.38,11.33,11.35  ],
    ["Canola oil (3 litres)","Canola oil","3 litres","Pantry staples",6.6,7.03,7.17,7.33,6.95,7.21,7.21,7.3,6.95,6.92,6.94,7.06,6.34,6.82,7.08,6.51,6.77,6.87,6.94,6.83,6.95,6.97,6.94,7.07,6.9,7.28,7.08,6.99,6.95,7.29,6.98,7.17,7.21,7.18,6.82,7.15,6.66,6.95,7.55,7.6,7.58,7.2,7.24,7.1,7.37,7.11,7.26,7.54,6.9,7.03,7.15,7.28,8.26,8.47,8.95,8.91,9.74,9.64,9.79,10.51,9.09,11.1,11.28,11.79,11.68,11.71,12.63,12.63,12.64,11.92,12.3,12.47,11.66,12.28,12.55  ],
    ["Olive oil (1 litre)","Olive oil","1 litre","Pantry staples",9,6.99,8.04,8.53,8.91,8.71,8.74,8.96,8.38,7.24,7.48,7.41,9.04,7.08,8.02,8.5,8.05,7.56,8.36,8.5,7.33,7.3,7.52,7.15,8.5,7.12,7.73,7.83,7.57,8.24,8.31,8.73,7.46,7.18,7.77,6.06,7.81,7.88,7.82,8.09,7.38,8.22,7.52,6.37,7.09,6.62,7.35,6.48,7.77,6.58,6.62,8.06,8.05,7.89,8.21,7.96,7.77,7.96,8.84,8.5,8.9,7.8,9.26,8.65,9.12,9.16,8.68,9.94,8.74,8.37,9.35,9.81,10.39,10.26,10.58  ],
    ["Baby food (128 millilitres)","Baby food","128 millilitres","Other",1.19,1.23,1.29,1.36,1.36,1.32,1.25,1.29,1.3,1.28,1.27,1.28,1.27,1.27,1.22,1.27,1.29,1.26,1.26,1.29,1.26,1.27,1.29,1.32,1.33,1.33,1.31,1.28,1.29,1.35,1.37,1.31,1.29,1.37,1.3,1.33,1.32,1.31,1.35,1.43,1.33,1.32,1.36,1.36,1.35,1.34,1.34,1.32,1.33,1.34,1.34,1.34,1.34,1.37,1.38,1.39,1.36,1.35,1.34,1.36,1.36,1.36,1.39,1.4,1.4,1.41,1.39,1.41,1.45,1.44,1.43,1.49,1.48,1.57,1.63  ],
    ["Infant formula (900 grams)","Infant formula","900 grams","Other",27.22,27.11,27.09,27.2,27.23,27.92,27.71,27.4,27.83,27.94,27.73,27.52,27.79,26.89,27.44,27.24,27.92,28.13,27.58,28.35,28.65,29.02,29.88,29.71,29.86,29.41,29.92,29.31,29.14,29.29,28.98,29.11,28.99,28.93,29.47,29.52,29.2,30.17,29.97,29.44,29.56,30,29.55,29.68,29.36,29.34,29.07,29.32,29.58,29.66,30.38,30.87,30.8,30.72,31.64,30.94,30.86,29.91,30.38,29.95,29.62,29.15,28.83,29.95,32.02,31.98,31.91,31.63,31.34,33.29,34.42,34.99,36.58,34.34,36.25  ],
    ["Peanut butter (1 kilogram)","Peanut butter","1 kilogram","Pantry staples",3.88,4.37,3.97,4.04,4.2,3.67,4.11,3.88,3.93,4.25,4.55,4.29,3.9,3.44,4.47,4.51,4.49,4.76,4.43,4.65,4.32,4.42,4.55,4.58,4.6,4.65,4.66,4.9,4.78,4.89,4.59,4.79,4.4,4.64,4.44,4.51,4.63,4.47,4.8,4.79,4.78,4.62,4.69,4.65,4.5,4.55,4.7,4.66,4.69,5.04,5.12,4.87,4.81,4.76,4.73,4.63,4.87,4.91,5.19,4.79,4.67,5.2,5.3,5.37,5.29,5.41,5.31,5.36,5.41,5.49,5.32,5.53,5.36,5.76,6.22  ],
    ["Mayonnaise (890 millilitres)","Mayonnaise","890 millilitres","Pantry staples",4.23,4.27,4.23,4.29,4.18,4.14,4.19,4.24,4.41,4.18,4.3,4.39,4.31,4.41,4.29,4.29,4.28,4.23,4.3,4.42,4.47,4.38,4.45,4.3,4.48,4.49,4.33,4.36,4.33,4.17,4.34,4.45,4.52,4.38,4.33,4.31,4.49,4.43,4.53,4.71,4.36,4.36,4.49,4.54,4.52,4.51,4.49,4.52,4.53,4.61,4.47,4.55,4.38,4.39,4.84,4.98,5.15,5.19,5.38,5.24,5.28,5.42,5.76,5.93,5.92,5.91,6.25,6.27,6.31,6.19,6.04,6.23,6.09,6.43,6.52  ],
    ["Canned baked beans (398 millilitres)","Canned baked beans","398 millilitres","Canned foods",1.16,1.19,1.18,1.22,1.21,1.18,1.22,1.19,1.22,1.24,1.26,1.27,1.18,1.19,1.22,1.24,1.2,1.17,1.22,1.12,1.19,1.2,1.08,1.16,1.19,1.21,1.24,1.23,1.16,1.2,1.24,1.26,1.12,1.25,1.09,1.2,1.19,1.22,1.28,1.44,1.39,1.27,1.27,1.23,1.3,1.26,1.28,1.33,1.33,1.31,1.22,1.23,1.22,1.25,1.2,1.21,1.3,1.41,1.43,1.47,1.45,1.46,1.37,1.49,1.54,1.51,1.59,1.41,1.61,1.6,1.55,1.65,1.57,1.76,1.72  ],
    ["Canned tomatoes (796 millilitres)","Canned tomatoes","796 millilitres","Canned foods",1.26,1.25,1.35,1.3,1.31,1.4,1.37,1.26,1.35,1.31,1.36,1.42,1.29,1.3,1.32,1.26,1.33,1.29,1.29,1.34,1.29,1.36,1.35,1.4,1.33,1.38,1.4,1.44,1.35,1.38,1.36,1.39,1.45,1.46,1.38,1.34,1.39,1.45,1.61,1.61,1.64,1.69,1.68,1.46,1.53,1.4,1.39,1.46,1.45,1.5,1.54,1.6,1.59,1.59,1.56,1.68,1.56,1.51,1.49,1.6,1.44,1.5,1.53,1.51,1.52,1.66,1.7,1.77,1.74,1.56,1.69,1.88,1.76,1.88,1.96  ],
    ["Canned soup (284 millilitres)","Canned soup","284 millilitres","Canned foods",0.88,0.89,0.98,1,1.15,1.17,1.03,0.88,0.94,0.97,1.01,1.13,1.03,0.84,1,0.97,1.28,1.05,0.86,0.96,0.88,1.01,0.99,1.15,1.07,0.86,1.01,1.07,1.33,1.15,0.99,0.89,0.89,1.07,1.01,1.17,1.17,0.9,1.1,1.31,1.21,1.27,1.21,0.94,0.99,1.24,1.16,1.21,1.18,1.15,1.02,1.01,1.01,1.09,1,0.95,1.05,1.16,1.06,1.23,1.18,1.17,1.2,1.23,1.25,1.4,1.43,1.21,1.37,1.53,1.24,1.65,1.38,1.63,1.34  ],
    ["Canned beans and lentils (540 millilitres)","Canned beans and lentils","540 millilitres","Canned foods",1.11,1.09,1.12,1.13,1.12,1.13,1.14,1.1,1.15,1.14,1.14,1.16,1.13,1.14,1.14,1.14,1.12,1.12,1.13,1.14,1.15,1.2,1.19,1.19,1.19,1.18,1.2,1.23,1.19,1.19,1.18,1.2,1.21,1.18,1.2,1.24,1.23,1.24,1.32,1.33,1.32,1.34,1.35,1.24,1.27,1.29,1.31,1.28,1.3,1.26,1.29,1.28,1.27,1.28,1.31,1.3,1.31,1.3,1.42,1.39,1.35,1.36,1.42,1.48,1.53,1.52,1.52,1.53,1.5,1.43,1.51,1.59,1.55,1.57,1.63  ],
    ["Canned corn (341 millilitres)","Canned corn","341 millilitres","Canned foods",1.07,1.09,1.1,1.01,1,1.08,1.02,0.96,1.07,1.03,1.08,1.01,1.09,1.08,1.03,1.07,1.08,1.1,0.94,1.07,1.05,1.05,1.07,1.01,1.1,1.12,1.14,1.09,1.15,1.12,1.14,1.14,1.17,1.1,1.19,1.12,1.2,1.17,1.23,1.33,1.44,1.38,1.43,1.41,1.39,1.28,1.27,1.15,1.27,1.35,1.37,1.38,1.37,1.34,1.37,1.36,1.35,1.22,1.29,1.17,1.31,1.38,1.37,1.25,1.38,1.41,1.49,1.69,1.58,1.35,1.41,1.33,1.46,1.64,1.59  ],
    ["Canned peach (398 millilitres)","Canned peach","398 millilitres","Canned foods",1.96,1.82,2,2.05,2.08,2.02,2.07,2.04,2,2.17,2.02,2,2.05,2.19,2.19,2.15,2.22,2.23,2.24,2.24,2.27,2.17,2.1,2.16,2.15,1.68,1.96,2.02,2.12,2.1,2.11,2.13,2.18,2.11,1.97,2.26,2.19,1.93,2.38,2.1,2.16,2.21,1.83,2.25,2.21,1.98,2.17,2.15,2.15,2.22,2.07,2.23,2.25,2.25,2.15,2.19,2.13,2.13,2.2,2.14,2.24,2.24,2.18,2.18,2.16,2.26,2.26,2.33,2.44,2.34,2.51,2.3,2.58,2.7,2.71  ],
    ["Canned pear (398 millilitres)","Canned pear","398 millilitres","Canned foods",1.95,1.86,2.09,1.98,1.86,1.99,2.08,2.05,1.94,2.11,2.1,2.05,2.03,2.12,2.14,2.13,2.17,2.15,2.16,2.05,2.05,2.08,2.06,2.13,2.07,2.03,2.04,2,2.06,2.1,2.02,2.05,2.12,2.19,2.09,2.21,2.19,2.12,2.42,2.29,2.49,2.37,2.4,2.42,2.3,2.26,2.21,2.34,2.28,2.33,2.33,2.29,2.31,2.36,2.33,2.31,2.14,2.16,2.26,2.23,2.33,2.32,2.27,2.27,2.27,2.35,2.39,2.45,2.5,2.48,2.56,2.46,2.65,2.69,2.56  ],
    ["Dried lentils (900 grams)","Dried lentils","900 grams","Grain / carbs",2.87,2.97,2.99,3.11,3.12,3.02,3.13,3.05,3.06,3.06,3.13,2.98,3.09,3.04,3,3.09,2.98,2.98,3.1,3.08,3.04,3.1,3.07,3.1,3.17,3.15,3.07,3.04,3.08,3.1,2.99,3,3,3.11,3.07,3.2,3.3,3.24,3.18,3.28,3.21,3.17,3.01,3,3.1,3.01,3.06,3.14,3.2,3.15,3.04,3.08,3.16,3.17,3.18,3.26,3.3,3.13,3.15,3.24,3.4,3.51,3.49,3.56,3.63,3.73,3.79,3.83,3.86,3.74,3.7,3.79,3.95,3.96,3.91  ],
    ["Dry beans and legumes (900 grams)","Dry beans and legumes","900 grams","Grain / carbs",2.63,2.72,2.75,2.85,2.88,2.87,2.91,2.85,2.8,2.85,2.83,2.74,2.85,2.85,2.77,2.83,2.77,2.73,2.8,2.81,2.78,2.84,2.84,2.83,2.94,2.94,2.82,2.85,2.84,2.87,2.82,2.77,2.79,2.81,2.8,2.87,3.02,2.97,2.92,3.02,3.04,3,2.83,2.79,2.88,2.75,2.82,2.93,2.9,2.93,2.88,2.85,2.9,2.89,2.93,2.96,2.95,2.78,2.83,2.96,3.11,3.24,3.3,3.32,3.37,3.47,3.56,3.56,3.6,3.38,3.29,3.51,3.62,3.62,3.63  ],
    ["Tofu (350 grams)","Tofu","350 grams","Meat / protein",2.07,2.05,2.05,1.99,1.98,1.98,2.02,2.01,1.97,2.03,2.01,2.05,2.03,2.12,2.15,2.17,2.16,2.26,2.27,2.27,2.26,2.26,2.25,2.18,2.26,2.22,2.23,2.23,2.22,2.21,2.19,2.21,2.22,2.23,2.26,2.25,2.2,2.26,2.29,2.33,2.48,2.38,2.34,2.35,2.31,2.31,2.38,2.39,2.41,2.4,2.42,2.4,2.47,2.5,2.36,2.45,2.54,2.52,2.46,2.46,2.46,2.66,2.59,2.64,2.6,2.67,2.75,2.78,2.86,2.87,2.8,2.78,2.65,2.86,2.87  ],
    ["Hummus (227 grams)","Hummus","227 grams","Pantry staples",3.41,3.29,3.36,3.3,3.39,3.38,3.29,3.34,3.37,3.36,3.28,3.22,3.27,3.3,3.33,3.32,3.41,3.36,3.44,3.31,3.42,3.36,3.39,3.29,3.32,3.37,3.41,3.27,3.28,3.26,3.33,3.33,3.46,3.45,3.4,3.37,3.36,3.44,3.49,3.44,3.33,3.34,3.44,3.36,3.38,3.37,3.44,3.39,3.42,3.41,3.44,3.41,3.35,3.31,3.48,3.42,3.42,3.45,3.43,3.42,3.47,3.42,3.43,3.49,3.59,3.51,3.69,3.88,3.91,3.82,3.83,3.81,3.85,3.85,3.94  ],
    ["Salsa (418 millilitres)","Salsa","418 millilitres","Pantry staples",3.14,3.04,3.09,3.19,3.14,3.13,3.15,3.2,3.23,3.11,3.12,3.06,3.03,3.04,3.13,3.16,3.19,3.11,3.08,3.19,3.31,3.17,3.09,3.07,3.1,3.11,3.24,3.28,3.21,3.24,3.26,3.35,3.36,3.38,3.31,3.36,3.26,3.31,3.39,3.43,3.49,3.5,3.5,3.55,3.43,3.44,3.41,3.39,3.4,3.4,3.5,3.49,3.57,3.48,3.42,3.4,3.4,3.51,3.58,3.5,3.69,3.78,3.78,3.71,3.81,3.98,4.03,4.08,4.19,4.19,4.11,4.23,4.34,4.4,4.5  ],
    ["Pasta sauce (650 millilitres)","Pasta sauce","650 millilitres","Pantry staples",2.07,2.02,1.96,2.15,2.11,2.12,2.06,2.09,2.14,2.11,2.11,2.16,2.1,1.91,2.09,2.1,2.11,1.98,2.1,2.16,2.13,2.18,2.17,2.35,2.16,2,2.13,2.17,2.22,2.26,2.17,2.29,2.17,2.22,2.17,2.27,2.16,2.08,2.43,2.42,2.5,2.41,2.36,2.4,2.28,2.31,2.35,2.42,2.29,2.34,2.46,2.21,2.41,2.5,2.61,2.44,2.4,2.55,2.48,2.65,2.45,2.57,2.51,2.7,2.55,2.83,2.85,2.85,3.01,2.94,2.74,3,3.08,3.04,3.13  ],
    ["Salad dressing (475 millilitres)","Salad dressing","475 millilitres","Pantry staples",2.39,2.44,2.39,2.44,2.36,2.27,2.3,2.37,2.46,2.43,2.43,2.41,2.55,2.55,2.42,2.35,2.29,2.31,2.37,2.36,2.38,2.36,2.55,2.38,2.61,2.62,2.51,2.53,2.44,2.39,2.36,2.51,2.48,2.38,2.44,2.4,2.51,2.58,2.59,2.62,2.43,2.65,2.57,2.55,2.59,2.54,2.73,2.61,2.62,2.57,2.6,2.65,2.51,2.61,2.74,2.78,2.88,2.84,3.02,3.15,3.14,3.28,3.43,3.38,3.24,3.14,3.3,3.22,3.38,3.21,3.19,3.34,3.32,3.48,3.52  ],
    ["Almonds (200 grams)","Almonds","200 grams","Snacks / drinks",3.74,4.45,4.57,4.42,4.32,4.07,4.45,4.4,4.62,4.64,4.5,4.45,4.32,4.71,4.63,5.08,4.98,4.86,5.11,5.23,5.23,5.08,4.66,4.63,5.14,5.1,5.02,5.16,5.2,5.12,5.21,5.34,5.13,4.95,4.93,4.85,5.25,5.13,5.34,5.5,5.52,5.57,5.63,5.12,4.88,4.98,4.51,4.83,5.08,5.15,5.12,4.93,5.24,5.41,5.39,5.44,5.39,4.88,4.87,5.05,5.19,5.17,5.3,5.32,5.43,5.45,5.26,5.32,5.39,5.28,4.93,4.98,5.12,5.11,4.61  ],
    ["Peanuts (450 grams)","Peanuts","450 grams","Snacks / drinks",3.49,3.53,3.52,3.44,3.37,3.33,3.41,3.34,3.51,3.58,3.24,3.32,3.38,3.3,3.4,3.46,3.44,3.37,3.52,3.42,3.44,3.42,3.23,3.07,3.11,3.11,3.16,3.28,3.19,3.18,3.37,3.35,3.19,3.29,2.99,3.15,3.27,3.08,3.18,3.36,3.24,3.33,3.36,3.38,3.25,3.24,3.26,3.26,3.14,2.89,3.26,3.28,3.12,3.25,3.3,3.3,3.29,3.27,3.17,3.14,3.28,3.13,3.27,3.26,3.33,3.17,3.2,3.33,3.52,3.34,3.45,3.56,3.54,3.61,3.75  ],
    ["Sunflower seeds (400 grams)","Sunflower seeds","400 grams","Snacks / drinks",3.8,3.78,3.81,3.74,3.66,3.73,3.77,3.81,4.04,4.01,3.98,4.02,4.03,3.99,4.04,3.97,3.9,3.91,3.91,4.01,4.08,4.04,4.1,4.07,4.01,4.01,4.11,4.17,4.11,4.14,4.17,4.1,4.14,4.14,4.12,4.16,4.05,4.22,4.23,4.23,4.24,4.26,4.17,4.15,4.19,4.22,4.2,4.21,4.21,4.19,4.2,4.17,4.05,3.96,4.17,4.16,4.06,4.03,4.05,4.14,3.97,4.24,4.13,4.22,4.08,4.06,4.26,4.3,4.32,4.32,4.32,4.44,4.39,4.47,4.57  ],
    ["Deodorant (85 grams)","Deodorant","85 grams","Other",4.71,4.47,4.66,4.83,4.8,4.81,4.69,4.66,4.54,4.78,4.63,4.84,4.79,4.7,4.78,4.78,4.88,4.78,4.91,4.77,4.84,4.84,4.72,4.78,4.92,4.88,4.89,5.07,5.02,4.84,5.02,4.92,4.86,4.8,4.89,4.86,5.19,4.98,5.26,5.33,5.17,5.09,5.21,5,5.08,5.13,5.09,5.23,5.15,5.2,5.35,5.42,5.5,5.33,5.5,5.5,5.67,5.9,5.95,6.01,5.97,5.77,6.06,6.23,6.4,6.33,6.51,6.31,6.38,6.41,6.51,6.79,6.79,6.76,7.03  ],
    ["Toothpaste (100 millilitres)","Toothpaste","100 millilitres","Other",2.43,2.78,2.61,2.73,2.63,2.86,2.76,2.71,2.69,2.75,2.71,2.85,2.71,2.68,2.69,2.71,2.77,2.63,2.89,2.59,2.83,2.8,2.86,2.82,2.77,2.72,2.91,3,2.86,2.84,2.92,2.81,3.07,3.01,3.09,3.08,2.98,3.05,3.14,3.35,3.3,3.03,3.22,3.16,3.05,3.14,3.23,3.27,3.07,3.19,3.38,3.24,3.36,3.27,3.4,3.41,3.32,3.3,3.41,3.5,3.22,3.56,3.48,3.55,3.56,3.58,3.59,3.73,3.79,3.69,3.61,3.8,3.5,3.77,3.77  ],
    ["Shampoo (400 millilitres)","Shampoo","400 millilitres","Other",4.94,4.88,4.99,5.17,5.15,5,5.03,5.03,5.02,5,5.15,5.11,5.11,4.98,4.93,4.84,5.03,5.12,5.14,5.06,4.83,5.08,5.21,5.32,5.27,5.12,5.1,5.36,5.07,5.11,5.19,5.02,5.05,5.08,5.16,5,5.37,5.08,5.25,5.27,5.37,5.41,5.23,5.24,5.16,5.16,5.23,5.38,5.33,5.16,5.25,5.37,5.52,5.57,5.38,5.49,5.67,5.74,5.81,5.81,5.9,5.65,5.68,5.75,5.86,5.95,5.93,6.07,6.08,6.11,6.12,6.27,6.31,6,6.37  ],
    ["Laundry detergent (4.43 litres)","Laundry detergent","4.43 litres","Other",13.27,13.05,13.4,11.45,12.43,12.78,12.51,11.74,12.91,11.68,12.75,11.65,13.51,12.22,13.03,12.28,12.89,11.86,12.17,12.36,11.89,12.02,12.59,11.93,13.54,12.37,11.86,12.79,12.19,12.26,12.81,11.88,11.88,13.04,10.62,11.77,12.59,11.06,12.94,13.72,12.76,13.75,13.76,12.36,13.05,13.18,13.85,13.2,13.8,13.46,13.28,12.94,12.48,13.13,13.27,13.48,13.15,13.68,12.59,13.74,14.05,14.09,15.24,14.47,14.97,14.95,14.62,14.62,14.94,14.82,14.95,15.51,15.03,16.07,15.26  ]
];

var dateLabels = ["Jan-2017","Feb-2017","Mar-2017","Apr-2017","May-2017","Jun-2017","Jul-2017","Aug-2017","Sep-2017","Oct-2017","Nov-2017","Dec-2017","Jan-2018","Feb-2018","Mar-2018","Apr-2018","May-2018","Jun-2018","Jul-2018","Aug-2018","Sep-2018","Oct-2018","Nov-2018","Dec-2018","Jan-2019","Feb-2019","Mar-2019","Apr-2019","May-2019","Jun-2019","Jul-2019","Aug-2019","Sep-2019","Oct-2019","Nov-2019","Dec-2019","Jan-2020","Feb-2020","Mar-2020","Apr-2020","May-2020","Jun-2020","Jul-2020","Aug-2020","Sep-2020","Oct-2020","Nov-2020","Dec-2020","Jan-2021","Feb-2021","Mar-2021","Apr-2021","May-2021","Jun-2021","Jul-2021","Aug-2021","Sep-2021","Oct-2021","Nov-2021","Dec-2021","Jan-2022","Feb-2022","Mar-2022","Apr-2022","May-2022","Jun-2022","Jul-2022","Aug-2022","Sep-2022","Oct-2022","Nov-2022","Dec-2022","Jan-2023","Feb-2023","Mar-2023"];
var categoryLabels = [
    "Meat / protein",
    "Dairy",
    "Fruit",
    "Fresh vegetables",
    "Frozen foods",
    "Grain / carbs",
    "Pantry staples",
    "Snacks / drinks",
    "Canned foods",
    "Other"
];

// http://vrl.cs.brown.edu/color
var colourArray = ["#C70039", "#56ebd3", "#A476FF", "#F92DAE", "#FF5733", "#64D77E", "#148fae", "#C26A16", "#FF9898", "#B8B8B8", "#39f27a","#ffd700","#003041","#218841","#FFB69F"];

var tickSpacing = 3;


var itemChart;
var dateSubtitle = "Jan-2017 to Mar-2023"
var itemPriceChartTitle = "Average Price of Selected Grocery Items in Canada";

var categoryChart;
var basketChart;

var item1Input = document.getElementById("item1Input");
var item2Input = document.getElementById("item2Input");
var item3Input = document.getElementById("item3Input");

var item1List = document.getElementById("item1List");
var item2List = document.getElementById("item2List");
var item3List = document.getElementById("item3List");

var selectedItem1;
var selectedItem2;
var selectedItem3;

var item1Array = [];
var item2Array = [];
var item3Array = [];

var categoryInput = document.getElementById("categoryInput");
//var categoryList = document.getElementById("categoryList");
var selectedCategory;

//list of item labels
itemLabelArray = [];
for(var i=0; i<priceDatabase.length; i++){
    itemLabelArray[i] = priceDatabase[i][0];
}
//console.log(itemLabelArray);

//dynamically generate datalist select menu
var itemListOptions = "";
for(var i=0; i<itemLabelArray.length; i++){
    itemListOptions += '<option value="' + itemLabelArray[i] + '" "/>';
}
item1List.innerHTML = itemListOptions;
item2List.innerHTML = itemListOptions;
item3List.innerHTML = itemListOptions;

/*
//add category datalist
var categoryOptions = "";
for(var i=0; i<categoryLabels.length; i++){
    categoryOptions += '<option value="' + categoryLabels[i] + '" "/>';
}
categoryList.innerHTML = categoryOptions;
*/

//add category select menu
var categoryOptions = "";
for(var i=0; i<categoryLabels.length; i++){
    categoryOptions += '<option value="' + categoryLabels[i] + '">'+categoryLabels[i]+'</option>';
}
categoryInput.innerHTML = categoryOptions;

var categoryOutputTable = document.getElementById('categoryOutputTable');

//sort item names into category arrays -- for category select menus 
var meatItemArray = [];
var vegetableItemArray = [];
var fruitItemArray = [];
var dairyItemArray = [];
var pantryItemArray = [];
var carbItemArray = [];

for(i=0; i<priceDatabase.length; i++){
    if(priceDatabase[i][3] == "Meat / protein"){
        meatItemArray.push(priceDatabase[i][0]);
    } else if(priceDatabase[i][3] == "Fruit"){
        fruitItemArray.push(priceDatabase[i][0]);
    } else if(priceDatabase[i][3] == "Dairy"){
        dairyItemArray.push(priceDatabase[i][0]);
    } else if(priceDatabase[i][3] == "Fresh vegetables"){
        vegetableItemArray.push(priceDatabase[i][0]);
    } else if(priceDatabase[i][3] == "Pantry staples"){
        pantryItemArray.push(priceDatabase[i][0]);
    } else if(priceDatabase[i][3] == "Grain / carbs"){
        carbItemArray.push(priceDatabase[i][0]);
    }
}

//console.log(meatItemArray);

//dynamically fill out category select menus based on item names
var meatSelectionMenus = document.getElementsByClassName("meatSelection");
itemListOptions = "";

for(i=0; i<=meatItemArray.length; i++){
    if(i==meatItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + meatItemArray[i] + '">'+meatItemArray[i]+'</option>';
    }
}
for(i=0; i<meatSelectionMenus.length; i++){
    meatSelectionMenus[i].innerHTML = itemListOptions;
}

var vegetableSelectionMenus = document.getElementsByClassName("vegetableSelection");
itemListOptions = "";

for(i=0; i<=vegetableItemArray.length; i++){
    if(i==vegetableItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + vegetableItemArray[i] + '">'+vegetableItemArray[i]+'</option>';
    }
}
for(i=0; i<vegetableSelectionMenus.length; i++){
    vegetableSelectionMenus[i].innerHTML = itemListOptions;
}

var fruitSelectionMenus = document.getElementsByClassName("fruitSelection");
itemListOptions = "";

for(i=0; i<=fruitItemArray.length; i++){
    if(i==fruitItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + fruitItemArray[i] + '">'+fruitItemArray[i]+'</option>';
    }
}
for(i=0; i<fruitSelectionMenus.length; i++){
    fruitSelectionMenus[i].innerHTML = itemListOptions;
}

var carbSelectionMenus = document.getElementsByClassName("carbSelection");
itemListOptions = "";

for(i=0; i<=carbItemArray.length; i++){
    if(i==carbItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + carbItemArray[i] + '">'+carbItemArray[i]+'</option>';
    }
}
for(i=0; i<carbSelectionMenus.length; i++){
    carbSelectionMenus[i].innerHTML = itemListOptions;
}

var dairySelectionMenus = document.getElementsByClassName("dairySelection");
itemListOptions = "";

for(i=0; i<=dairyItemArray.length; i++){
    if(i==dairyItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + dairyItemArray[i] + '">'+dairyItemArray[i]+'</option>';
    }
}
for(i=0; i<dairySelectionMenus.length; i++){
    dairySelectionMenus[i].innerHTML = itemListOptions;
}

var pantrySelectionMenus = document.getElementsByClassName("pantrySelection");
itemListOptions = "";

for(i=0; i<=pantryItemArray.length; i++){
    if(i==pantryItemArray.length){
        itemListOptions += '<option value="[Blank]" selected="selected">[Blank]</option>';
    } else{
        itemListOptions += '<option value="' + pantryItemArray[i] + '">'+pantryItemArray[i]+'</option>';
    }
}
for(i=0; i<pantrySelectionMenus.length; i++){
    pantrySelectionMenus[i].innerHTML = itemListOptions;
}

var basketSelectionArray = [];


//date slider for category % change analysis
var sliderInputMin = "Jan-2017";
var sliderInputMax = "Mar-2023";

var oldSliderMin = sliderInputMin;
var oldSliderMax = sliderInputMax;

var minSelectedDate = sliderInputMin;
var maxSelectedDate = sliderInputMax;


var mySlider = new rSlider({
    target: '#yearRangeSlider',
    //values: {min: sliderInputMinYear, max: sliderInputMaxYear},
    values: dateLabels,
    step: 1,
    range: true,
    tooltip: true,
    scale: true,
    labels: false,
    set: [sliderInputMin, sliderInputMax],
    onChange: function (values) {
        
        var yearRangeSliderValues = mySlider.getValue();
        var yearRangeSliderValuesArray = yearRangeSliderValues.split(',');
    
        console.log("Current slider values: "+yearRangeSliderValues);
    
        minSelectedDate = String(yearRangeSliderValuesArray[0]);
        maxSelectedDate = String(yearRangeSliderValuesArray[1]);

        if(minSelectedDate != oldSliderMin || maxSelectedDate != oldSliderMax){
            refreshAnalysis2();
        }

        oldSliderMin = minSelectedDate;
        oldSliderMax = maxSelectedDate;

    }
});

//main method
getUserInputs();
addInputEventListeners();
runCategoryChart();
runItemChart();
runBasketChart();

function getUserInputs(){

    selectedItem1 = item1Input.value;
    //console.log("item 1 selected value: "+selectedItem1);

    for(i=0;i<priceDatabase.length;i++){
        if(selectedItem1 == priceDatabase[i][0]){
            item1Array = priceDatabase[i].slice(4); //only take the $ values
            break;
        }

        if(i==priceDatabase.length-1){
            item1Array = [];
            selectedItem1 = "n/a";
        }
    }
    //console.log("selected item 1 array: "+item1Array);

    selectedItem2 = item2Input.value;
    //console.log("item 2 selected value: "+selectedItem2);

    for(i=0;i<priceDatabase.length;i++){
        if(selectedItem2 == priceDatabase[i][0]){
            item2Array = priceDatabase[i].slice(4); //only take the $ values
            break;
        }

        if(i==priceDatabase.length-1){
            item2Array = [];
            selectedItem2 = "n/a";
        }
    }
    //console.log("selected item 2 array: "+item2Array);

    selectedItem3 = item3Input.value;
    //console.log("item 3 selected value: "+selectedItem3);

    for(i=0;i<priceDatabase.length;i++){
        if(selectedItem3 == priceDatabase[i][0]){
            item3Array = priceDatabase[i].slice(4); //only take the $ values
            break;
        }

        if(i==priceDatabase.length-1){
            item3Array = [];
            selectedItem3 = "n/a";
        }
    }
    //console.log("selected item 3 array: "+item3Array);

    //get category input
    selectedCategory = categoryInput.value;
    console.log("Selected category: "+selectedCategory);

    //set time period from range slider
    
    /*
    var yearRangeSliderValues = mySlider.getValue();
    var yearRangeSliderValuesArray = yearRangeSliderValues.split(',');

    console.log("Current slider values: "+yearRangeSliderValues);

    minSelectedDate = String(yearRangeSliderValuesArray[0]);
    maxSelectedDate = String(yearRangeSliderValuesArray[1]);
    */

    //get basket selections
    basketSelectionArray = [];
    var basketSelectionFields = document.getElementsByClassName("basketSelection");
    for(i=0; i<basketSelectionFields.length; i++){
        basketSelectionArray.push(String(basketSelectionFields[i].value));
    }
    console.log(basketSelectionArray);

}

function addInputEventListeners() {
    var inputsArray = document.getElementsByClassName("userInput");
    var inputs2Array = document.getElementsByClassName("userInput2");
    var inputs3Array = document.getElementsByClassName("userInput3");
    console.log("# of event listeners: "+inputsArray.length);
    console.log("# of event listeners - 2: "+inputs2Array.length);
    console.log("# of event listeners - 3: "+inputs3Array.length);

    for(i=0;i<inputsArray.length;i++) {
        inputsArray[i].addEventListener('change',refreshAnalysis, false);
    }

    for(i=0;i<inputs2Array.length;i++) {
        inputs2Array[i].addEventListener('change',refreshAnalysis2, false);
    }

    for(i=0;i<inputs3Array.length;i++) {
        inputs3Array[i].addEventListener('change',refreshAnalysis3, false);
    }

    //specific event listeners to style the basket select menus when blank is selected
    var basketInputs = document.getElementsByClassName("basketSelection");

    for(i=0;i<basketInputs.length;i++) {
        basketInputs[i].addEventListener('change', (event) => {
            const selectedOption = event.target.value;
            if(selectedOption=="[Blank]"){
                event.target.classList.add("blankOption");
            } else{
                event.target.classList.remove("blankOption");
            }
        });
    }

}

function refreshAnalysis(){
    console.log("refresh analysis");
    itemChart.destroy();
    getUserInputs();
    runItemChart();
}

function refreshAnalysis2(){
    console.log("refresh analysis2");
    categoryOutputTable.getElementsByTagName('tbody')[0].innerHTML = "";
    categoryChart.destroy();
    getUserInputs();
    runCategoryChart();
}

function refreshAnalysis3(){
    console.log("refresh analysis3");
    basketChart.destroy();
    getUserInputs();
    runBasketChart();
}

function runItemChart(){

    var ctx = document.getElementById('multiItemChart').getContext('2d');
    var lineWidth = 2;
    var pointRadius = 3;
    var hoverRadius = 5;

    // Multi-line chart for the price of selected items over time
    itemChart = new Chart(ctx, {
        type: 'line',

        // The data for our dataset
        data: {
            labels: dateLabels,
            datasets: [
                {
                    label: selectedItem1,
                    data: item1Array,
                    fill: false,
                    borderColor: colourArray[0],
                    pointBorderColor: colourArray[0],
                    pointBackgroundColor: colourArray[0],
                    backgroundColor: colourArray[0],
                    borderWidth: lineWidth,
                    pointBorderWidth: lineWidth,
                    pointRadius: pointRadius,
                    pointHoverRadius: hoverRadius,
                    pointHitRadius: hoverRadius,
                },
                {
                    label: selectedItem2,
                    data: item2Array,
                    fill: false,
                    borderColor: colourArray[1],
                    pointBorderColor: colourArray[1],
                    pointBackgroundColor: colourArray[1],
                    backgroundColor: colourArray[1],
                    borderWidth: lineWidth,
                    pointBorderWidth: lineWidth,
                    pointRadius: pointRadius,
                    pointHoverRadius: hoverRadius,
                    pointHitRadius: hoverRadius,
                },
                {
                    label: selectedItem3,
                    data: item3Array,
                    fill: false,
                    borderColor: colourArray[2],
                    pointBorderColor: colourArray[2],
                    pointBackgroundColor: colourArray[2],
                    backgroundColor: colourArray[2],
                    borderWidth: lineWidth,
                    pointBorderWidth: lineWidth,
                    pointRadius: pointRadius,
                    pointHoverRadius: hoverRadius,
                    pointHitRadius: hoverRadius,
                },
            ]
        },

        // Configuration options go here

        options: {

            maintainAspectRatio: false,
        
            scales: {
                y: {
                    ticks: {
                        // Include a dollar sign in the ticks and add comma formatting
                        callback: function(value, index, values) {                                    
                            return dollarFormatting(value);
                        },

                        fontColor: "rgb(56,56,56)",
                    },

                    title: {
                        display: true,
                        text: "Average Price ($)",
                        color: "rgb(56,56,56)",
                        fontStyle: "bold",
                        font: {
                            size: 15,
                            weight: "bold",
                        }
                    },

                    grid: {
                        drawTicks: false,
                        color: function(context) {
                            if (context.tick.value == 0) {
                                return "#000000";
                            } else {
                                return "#E9E9E9";
                            }
                        }
                    },
                },

                x: {
                    ticks: {
                        callback: function(val, index) {
                            if (!(index % tickSpacing)) return this.getLabelForValue(val)+" ";
                        },
                        autoSkip: false,
                        fontColor: "rgb(56,56,56)",

                        maxRotation: 90,
                        minRotation: 90, 
                    },

                    title: {
                        display: true,
                        text: "Date",
                        color: "rgb(56,56,56)",
                        font: {
                            size: 15,
                            weight: "bold",
                        }
                    },

                    grid: {
                        drawTicks: false,

                        color: function(context) {
                            if (context.tick.value == 0) {
                                return "#000000";
                            } else {
                                return "#E9E9E9";
                            }
                        }
                    },
                },    
            },

            plugins: {

                title: {
                    display: true,
                    text: itemPriceChartTitle,
                    color: "rgb(56,56,56)",
                    padding: 2,
                    font: {
                        size: 20,
                        weight: "bold",
                    }
                },

                subtitle: {
                    display: true,
                    text: dateSubtitle,
                    color: "rgb(56,56,56)",
                    padding: 2,
                    font: {
                        size: 17,
                    }
                },

                legend: {
                    display: true,
                    labels: {
                        fontColor: "rgb(56,56,56)",
                        boxWidth: 13,
                        padding: 10,
                    },
                },

                tooltip: {
                
                    // Include a dollar sign in the ticks and add comma formatting
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';

                            if (label) {
                                label += ': ';
                            }

                            label += dollarFormatting(context.parsed.y);
                            
                            return label;
                        }
                    },
                },

            },

        },
           
        //draws a white background behind the chart when exporting as png image
        plugins: [{
            id: 'custom_canvas_background_color',
            beforeDraw: (chart) => {
            const ctx = chart.canvas.getContext('2d');
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, chart.canvas.width, chart.canvas.height);
            ctx.restore();
            }
        }],

    });

    //output table for selected items
    document.getElementById("item1Header").innerHTML = String(selectedItem1);
    document.getElementById("item2Header").innerHTML = String(selectedItem2);
    document.getElementById("item3Header").innerHTML = String(selectedItem3);

    document.getElementById("item1Header").style.backgroundColor = changeHEXOpacity(colourArray[0], 0.3);
    document.getElementById("item2Header").style.backgroundColor = changeHEXOpacity(colourArray[1], 0.3);
    document.getElementById("item3Header").style.backgroundColor = changeHEXOpacity(colourArray[2], 0.3);

    var numYears=6;
    for(i=1; i<=numYears; i++){
        var currentCell = String("yr"+i+"Item1");
        var currentValue = Number(item1Array[item1Array.length-1]) / Number(item1Array[item1Array.length-1-(12*i)]) -1;
        document.getElementById(currentCell).innerHTML = percentDeltaFormatting(currentValue);
    }
    for(i=1; i<=numYears; i++){
        var currentCell = String("yr"+i+"Item2");
        var currentValue = Number(item2Array[item2Array.length-1]) / Number(item2Array[item2Array.length-1-(12*i)]) -1;
        document.getElementById(currentCell).innerHTML = percentDeltaFormatting(currentValue);
    }
    for(i=1; i<=numYears; i++){
        var currentCell = String("yr"+i+"Item3");
        var currentValue = Number(item3Array[item3Array.length-1]) / Number(item3Array[item3Array.length-1-(12*i)]) -1;
        document.getElementById(currentCell).innerHTML = percentDeltaFormatting(currentValue);
    }

}

function runCategoryChart(){

    //change emoji icon based on user category selection

    var categoryIconCell = document.getElementById("categoryIcon");
    if(selectedCategory==categoryLabels[0]){
        categoryIconCell.innerHTML = "🥩";
    } else if(selectedCategory==categoryLabels[1]){
        categoryIconCell.innerHTML = "🧀";
    } else if(selectedCategory==categoryLabels[2]){
        categoryIconCell.innerHTML = "🥝";
    } else if(selectedCategory==categoryLabels[3]){
        categoryIconCell.innerHTML = "🥕";
    } else if(selectedCategory==categoryLabels[4]){
        categoryIconCell.innerHTML = "🧊";
    } else if(selectedCategory==categoryLabels[5]){
        categoryIconCell.innerHTML = "🌾";
    } else if(selectedCategory==categoryLabels[6]){
        categoryIconCell.innerHTML = "👩‍🍳";
    } else if(selectedCategory==categoryLabels[7]){
        categoryIconCell.innerHTML = "🥨";
    } else if(selectedCategory==categoryLabels[8]){
        categoryIconCell.innerHTML = "🥫";
    } else if(selectedCategory==categoryLabels[9]){
        categoryIconCell.innerHTML = "📦";
    } else {
        categoryIconCell.innerHTML = "❌";
    }


    //get all items matching the user selected category
    var selectedCategoryDatabase = [];
    var categoryCount = 0;

    for(i=0; i<priceDatabase.length; i++){
        if(priceDatabase[i][3] == selectedCategory){
            selectedCategoryDatabase[categoryCount] = priceDatabase[i].slice();
            categoryCount++;
        }
    }
    console.log(selectedCategoryDatabase);

    //get price data at selected start / end date
    var startDate = minSelectedDate;
    var endDate = maxSelectedDate;

    var startingPosition = 0;
    var endingPosition = 0;
    var offset = 4;

    for(i=0; i<dateLabels.length; i++){
        if(dateLabels[i] == startDate){
            startingPosition = i+offset;
        }
        if(dateLabels[i] == endDate){
            endingPosition = i+offset;
        }
    }

    var categoryChartTitle = "% change in prices for "+selectedCategory;
    var categoryChartSubtitle = startDate + " to " + endDate;

    console.log("Start / end position: "+startingPosition+", "+endingPosition);

    //populate arrays
    var categoryLabelArray = [];
    var startingPriceArray = [];
    var endingPriceArray = [];
    var dollarChangeArray = [];
    var percentChangeArray = [];
    var rankArray = [];

    for(i=0; i<selectedCategoryDatabase.length; i++){
        categoryLabelArray[i] = selectedCategoryDatabase[i][0];
        startingPriceArray[i] = selectedCategoryDatabase[i][startingPosition];
        endingPriceArray[i] = selectedCategoryDatabase[i][endingPosition];
        dollarChangeArray[i] = endingPriceArray[i] - startingPriceArray[i];
        percentChangeArray[i] = dollarChangeArray[i] / startingPriceArray[i];
    }

    rankArray = rankings(percentChangeArray);

    //console.log(percentChangeArray);
    //console.log(rankArray);

    //generate new arrays which are ranked based on the percent change (high to low)
    var rankedCategoryLabelArray = reorderArray(categoryLabelArray, rankArray);
    var rankedStartingPriceArray = reorderArray(startingPriceArray, rankArray)
    var rankedEndingPriceArray = reorderArray(endingPriceArray, rankArray)
    var rankedDollarChangeArray = reorderArray(dollarChangeArray, rankArray)
    var rankedPercentChangeArray = reorderArray(percentChangeArray, rankArray)
    
    //console.log(rankedCategoryLabelArray);

    //generate table
    var tbodyRef = categoryOutputTable.getElementsByTagName('tbody')[0];

    for(i=0; i<selectedCategoryDatabase.length; i++){
        // Insert a row at the end of table
        var newRow = tbodyRef.insertRow();

        // Insert cells
        var newCell = newRow.insertCell();
        var newText = document.createTextNode(rankedCategoryLabelArray[i]);
        newCell.appendChild(newText);

        newCell = newRow.insertCell();
        newCell.classList.add("dataCell");
        newText = document.createTextNode(dollarFormatting(rankedStartingPriceArray[i]));
        newCell.appendChild(newText);

        newCell = newRow.insertCell();
        newCell.classList.add("dataCell");
        newText = document.createTextNode(dollarFormatting(rankedEndingPriceArray[i]));
        newCell.appendChild(newText);

        newCell = newRow.insertCell();
        newCell.classList.add("dataCell");
        newText = document.createTextNode(dollarDeltaFormatting(rankedDollarChangeArray[i]));
        newCell.appendChild(newText);

        newCell = newRow.insertCell();
        newCell.classList.add("dataCell");
        newCell.classList.add("highlightCell");
        newText = document.createTextNode(percentDeltaFormatting(rankedPercentChangeArray[i]));
        newCell.appendChild(newText);

    }

    document.getElementById("startingPriceHeader").innerHTML = startDate+" Price";
    document.getElementById("endingPriceHeader").innerHTML = endDate+ " Price";

    //bar chart showing % price change for each category

    var barBackgroundColour = "gray";
    for(i=0; i<categoryLabelArray.length; i++){
        if(selectedCategory == String(categoryLabels[i])){
            barBackgroundColour = colourArray[i];
        }
    }

    var ctx2 = document.getElementById('categoryChart').getContext('2d');

    categoryChart = new Chart(ctx2, {
        // The type of chart we want to create
        type: 'bar',

        // The data for our dataset
        data: {
            labels: rankedCategoryLabelArray,
            datasets: [
                {
                    label: "% change in price",
                    data: rankedPercentChangeArray,
                    backgroundColor: barBackgroundColour, 
                    //backgroundColor: colourArray[4], 
                },                
            ]
        },

        //options for bar chart
        options: {

            maintainAspectRatio: false,
            
            scales: {
                y: {

                    title: {
                        display: true,
                        text: "% change in avg. price",
                        color: "rgb(56,56,56)",
                        fontStyle: "bold",
                        font: {
                            size: 15,
                            weight: "bold",
                        }
                    },

                    ticks: {
                        callback: function(value, index, values) {
                            return (percentDeltaFormatting(value));
                        },

                        fontColor: "rgb(56,56,56)",

                        suggestedMin: 0,
                        suggestedMax: 0,
                    },

                    grid: {
                        drawTicks: false,

                        color: function(context) {
                            if (context.tick.value == 0) {
                                return "#000000";
                            } else {
                                return "#E9E9E9";
                            }
                        }
                    },
                },

                x: {
                    
                    ticks: {

                        callback: function(val, index) {
                            return this.getLabelForValue(val)+" ";
                        },
                        autoSkip: false,

                        
                        maxRotation:90,
                        minRotation:45,
                        
                    },

                    title: {
                        display: true,
                        text: "Item",
                        color: "rgb(56,56,56)",
                        fontStyle: "bold",
                        font: {
                            size: 15,
                            weight: "bold",
                        }
                    },

                },    
            },

            plugins: {

                title: {
                    display: true,
                    text: categoryChartTitle,
                    color: "rgb(56,56,56)",
                    padding: 2,
                    font: {
                        size: 20,
                        weight: "bold",
                    }
                },

                subtitle: {
                    display: true,
                    text: categoryChartSubtitle,
                    color: "rgb(56,56,56)",
                    font: {
                        size: 17,
                    }
                },

                legend: {
                    display: false,
                    labels: {
                        fontColor: "rgb(56,56,56)",
                        boxWidth: 13,
                        padding: 10,
                    },
                },

                tooltip: {
                    callbacks: {
                        label: function(context) {
                            let label = context.dataset.label || '';

                            if (label) {
                                label += ': ';
                            }
                            label += percentDeltaFormatting(context.parsed.y);
                            return label;
                        }
                    },
                },
            },
        },

        //draws a white background behind the chart when exporting as png image
        plugins: [{
            id: 'custom_canvas_background_color',
            beforeDraw: (chart) => {
            const ctx = chart.canvas.getContext('2d');
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, chart.canvas.width, chart.canvas.height);
            ctx.restore();
            }
        }],

    });
}


function runBasketChart(){

    //price database for selected basket items only
    var basketPriceArray = [];
    var itemCount = 0;

    for(i=0; i<priceDatabase.length; i++){
        
        var currentItem = priceDatabase[i][0];

        //count and add up items which are included in the basket (incl. duplicates)
        if(basketSelectionArray.includes(currentItem)){
            for(j=0;j<basketSelectionArray.length;j++){
                if(basketSelectionArray[j]==currentItem){
                    basketPriceArray[itemCount] = priceDatabase[i].slice();
                    itemCount++;
                }
            }
        }
    }
    console.log("basket item count: "+itemCount);

    //update number of items counter
    var itemCounter = document.getElementById("numberItemsCell");
    if(itemCount>1){
        itemCounter.innerHTML = Number(itemCount)+" items selected";
    } else if(itemCount==1){
        itemCounter.innerHTML = "1 item selected";
    } else {
        itemCounter.innerHTML = "No items selected";
    }

    //total basket price
    var totalBasketPrice = [];
    var offset = 4; //price data starts at column 5 of the database

    for(i=0; i<dateLabels.length; i++){
        
        var currentPosition = i+offset;
        var currentBasketPrice = 0;

        for(j=0; j<basketPriceArray.length; j++){
            currentValue = Number(basketPriceArray[j][currentPosition]);
            currentBasketPrice += currentValue;
        }

        totalBasketPrice.push(currentBasketPrice);
    }
    //console.log(totalBasketPrice);


    //line chart for selected basket price over time
    
    var ctx3 = document.getElementById('basketChart').getContext('2d');
    //var ctx3 = document.getElementById('basketChart');

    var lineWidth = 2;
    var pointRadius = 3;
    var hoverRadius = 5;
    var basketChartTitle = "Price of Your Grocery Basket Over Time";
    var basketChartSubtitle = "Jan-2017 to Mar-2023";
    var lineColour = colourArray[6];

    const chartOptions = {

        maintainAspectRatio: false,
    
        scales: {
            y: {
                ticks: {
                    // Include a dollar sign in the ticks and add comma formatting
                    callback: function(value, index, values) {                                    
                        return dollarFormatting(value);
                    },

                    fontColor: "rgb(56,56,56)",
                    
                    /*
                    suggestedMin: 0,
                    suggestedMax: 50,
                    */
                },

                title: {
                    display: true,
                    text: "Selected Basket Price ($)",
                    color: "rgb(56,56,56)",
                    fontStyle: "bold",
                    font: {
                        size: 15,
                        weight: "bold",
                    }
                },

                grid: {
                    drawTicks: false,
                    color: function(context) {
                        if (context.tick.value == 0) {
                            return "#000000";
                        } else {
                            return "#E9E9E9";
                        }
                    }
                },
            },

            x: {
                ticks: {
                    callback: function(val, index) {
                        if (!(index % tickSpacing)) return this.getLabelForValue(val)+" ";
                    },
                    autoSkip: false,
                    fontColor: "rgb(56,56,56)",

                    maxRotation: 90,
                    minRotation: 90, 
                },

                title: {
                    display: true,
                    text: "Date",
                    color: "rgb(56,56,56)",
                    font: {
                        size: 15,
                        weight: "bold",
                    }
                },

                grid: {
                    drawTicks: false,

                    color: function(context) {
                        if (context.tick.value == 0) {
                            return "#000000";
                        } else {
                            return "#E9E9E9";
                        }
                    }
                },
            },    
        },

        plugins: {

            title: {
                display: true,
                text: basketChartTitle,
                color: "rgb(56,56,56)",
                padding: 2,
                font: {
                    size: 20,
                    weight: "bold",
                }
            },

            subtitle: {
                display: true,
                text: basketChartSubtitle,
                color: "rgb(56,56,56)",
                padding: 2,
                font: {
                    size: 17,
                }
            },

            legend: {
                display: true,
                labels: {
                    fontColor: "rgb(56,56,56)",
                    boxWidth: 13,
                    padding: 10,
                },
            },

            tooltip: {
            
                // Include a dollar sign in the ticks and add comma formatting
                callbacks: {
                    label: function(context) {
                        let label = context.dataset.label || '';

                        if (label) {
                            label += ': ';
                        }

                        label += dollarFormatting(context.parsed.y);
                        
                        return label;
                    }
                },
            },
        },

    };

    basketChart = new Chart(ctx3, {
        // The type of chart we want to create
        type: 'line',

        // The data for our dataset
        data: {
            labels: dateLabels,
            datasets: [
                {
                    label: "Selected Basket Price ("+itemCount+" items)",
                    data: totalBasketPrice,
                    fill: false,
                    borderColor: lineColour,
                    pointBorderColor: lineColour,
                    pointBackgroundColor: lineColour,
                    backgroundColor: lineColour,
                    borderWidth: lineWidth,
                    pointBorderWidth: lineWidth,
                    pointRadius: pointRadius,
                    pointHoverRadius: hoverRadius,
                    pointHitRadius: hoverRadius,
                },
            ]
        },

        // Configuration options go here
        options: chartOptions,

        //draws a white background behind the chart when exporting as png image
        plugins: [{
            id: 'custom_canvas_background_color',
            beforeDraw: (chart) => {
            const ctx = chart.canvas.getContext('2d');
            ctx.save();
            ctx.globalCompositeOperation = 'destination-over';
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, chart.canvas.width, chart.canvas.height);
            ctx.restore();
            }
        }],

    });

    //output table for $ and % change of basket
    var numYears=6;
    for(i=1; i<=numYears; i++){
        var currentCell = String("basketYr"+i+"$");
        var currentValue = Number(totalBasketPrice[totalBasketPrice.length-1]) - Number(totalBasketPrice[totalBasketPrice.length-1-(12*i)]);
        document.getElementById(currentCell).innerHTML = dollarDeltaFormatting(currentValue);
    }
    for(i=1; i<=numYears; i++){
        var currentCell = String("basketYr"+i+"%");
        var currentValue = Number(totalBasketPrice[totalBasketPrice.length-1]) / Number(totalBasketPrice[totalBasketPrice.length-1-(12*i)]) -1;
        document.getElementById(currentCell).innerHTML = percentDeltaFormatting(currentValue);
    }

}

//clear all basket selections
function clearBasket(){
    var basketSelectionFields = document.getElementsByClassName("basketSelection");
    for(i=0;i<basketSelectionFields.length;i++){
        basketSelectionFields[i].value = "[Blank]";
        basketSelectionFields[i].classList.add("blankOption");
    }
    refreshAnalysis3();
}

//Helper functions

//save chart.js chart as png image
function saveChart(chartName) {
    console.log(chartName);
    const dataUrl = chartName.toBase64Image('image/png', 1);
    const link = document.createElement('a');
    link.download = "TMOAP-food price inflation chart.png";
    link.href = dataUrl;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function fillCanvasBackgroundWithColor(canvas, color) {
    // Get the 2D drawing context from the provided canvas.
    const context = canvas.getContext('2d');
  
    // We're going to modify the context state, so it's
    // good practice to save the current state first.
    context.save();
  
    // Normally when you draw on a canvas, the new drawing
    // covers up any previous drawing it overlaps. This is
    // because the default `globalCompositeOperation` is
    // 'source-over'. By changing this to 'destination-over',
    // our new drawing goes behind the existing drawing. This
    // is desirable so we can fill the background, while leaving
    // the chart and any other existing drawing intact.
    // Learn more about `globalCompositeOperation` here:
    // https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation
    context.globalCompositeOperation = 'destination-over';
  
    // Fill in the background. We do this by drawing a rectangle
    // filling the entire canvas, using the provided color.
    context.fillStyle = color;
    context.fillRect(0, 0, canvas.width, canvas.height);
  
    // Restore the original context state from `context.save()`
    context.restore();
}

function rankings(arr) {
    const sorted = [...arr].sort((a, b) => b - a);
    return arr.map((x) => sorted.indexOf(x) + 1);
};

function reorderArray(originalArray, rankArray){
    var newArray = [];
    for(i=0; i<originalArray.length; i++){
        var currentValue = originalArray[i];
        var currentRank = rankArray[i];
        newArray[currentRank-1] = currentValue;
    }
    return newArray;
}
  
function dollarFormatting(val){
    return "$"+((Math.round(val*100)/100).toLocaleString());
}

function dollarDeltaFormatting(val){
    
    if(isNaN(val)){
        return "n/a";
    } else if(val>0){
        return "+$"+((Math.round(val*100)/100).toLocaleString());
    } else if(val==0){
        return "+0";
    } else {
        return "-$"+((Math.abs(Math.round(val*100))/100).toLocaleString());
    }
}

function percentFormatting(val){
    return (Math.round(val*1000)/10).toLocaleString()+"%";
}

function percentDeltaFormatting(val){
    if(isNaN(val)){
        return "n/a";
    } else if(val>0){
        return "+"+(Math.round(val*1000)/10).toLocaleString()+"%";
    } else if(val==0){
        return "+0%";
    } else {
        return (Math.round(val*1000)/10).toLocaleString()+"%";
    }
}

function ratioFormatting(val){
    return (Math.round(val*10)/10).toFixed(1).toLocaleString()+"x";
}

function ratioDeltaFormatting(val){
    if(val>0){
        return "+"+(Math.round(val*10)/10).toFixed(1).toLocaleString()+"x";
    } else if(val==0){
        return "n/a";
    } else {
        return (Math.round(val*10)/10).toFixed(1).toLocaleString()+"x";
    }
}

function changeHEXOpacity(originalHEX, opacity){
    // Convert the HEX color to an RGB color with alpha transparency
    const red = parseInt(originalHEX.slice(1, 3), 16);
    const green = parseInt(originalHEX.slice(3, 5), 16);
    const blue = parseInt(originalHEX.slice(5, 7), 16);
    const alpha = opacity;
    const rgbaColor = `rgba(${red}, ${green}, ${blue}, ${alpha})`;

    return rgbaColor;
}